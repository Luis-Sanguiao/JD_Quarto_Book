# Calendar correction {.unnumbered}

## Chapter's overview

This chapter is diived in two parts
- theory 
- practice
IT describes:
theory 
- rationale for calendar correction as part of seasonal adjustment 
-   underlying principles and concepts of calendar correction
BOILS down to 
Choice to correct calendar effects by regression (deterministic)
happens in pre adjustment

Practical consequence

goal= generate a set of regresssors corresponding to the desired correction 

- step 1 : generate a calendar (usually national calndar of interest, uif this step is skipped a defalut calendar not taking into accoutn (any) country-specific holidays will be used ) 

- step 2 generate regressors based on the above defined calendar

Regressors for different data frequencies 
- 
- 
- daily data: calendar regressors = dummies 

- step 2b: easter effect different concept (not a group of days )

Most of the fucntions are designed for quarterly and mothly data, but also HF specificities underlined 

Regressors are corrected for seasonality, long term mean correction (link to later)


- step 3: these regressors have to be plugged-in in pre-adjustment 

several ways to do this 

How to use these variables within a seasonal adjustment process is detailed in chapters on [SA](A-sa.qmd) or [SA of HF data](A-sa-hf.qmd).

How to add other types of regressors outliers chap

#### Calendar in R vs in GUI: quick contrasting

(do this kind of stuff in every chapter)

- is group and reference day choice as flexible in GUI as in R 

- in GUI (v3) automatic detection, what about in R

- HF in R vs in GUI calndar wise

- aggregation to weekly

## Rationale for Calendar correction

The calendar is heterogeneous:  

- trading days:   
    + days usually worked, taking into account the company's sector. Most frequently, they are Mondays through Fridays when not bank holidays.  

- week-ends  

- bank holidays  

For a given year as well as throughout the years, every month doesn't have the same number of days per day-type:  
$\implies$ all months/quarters aren't "equal", even for a given type of month or quarter  
This causes **calendar effects**.

2 types of effects are highlighted:

- length of period (month/quarter) (leap-year or direct correction)
- composition of period (type of day)

add a note on daily and weekly series, or generalize

- easter
or more generally moving holiday special effect (Ramadan, Chinese new year..cf HB ?)
For some series, variations linked to Easter can be seen over a few days prior or following Easter: it's the  *gradual Easter effect*.

Example: flowers and chocolate sales might rise significantly as Easter approaches

(in practice very rare, better to deactivate by default detection)


## Modelling calendar effects


Correction via regression in preadj step (or simultaneous in BSM)

remove deterministic seaso from regressors with log terme mean correction

To identify "significant" effects and to reduce the number of parameters to estimate with the regression, we must try to establish similarities between types of days. GROUPS

- normal

- leap year (adjust)

- length of period 

- easter 

- stock..


### Regression Model 

For each period $t$, the days are divided in $K$ groups $\lbrace{D_{t1},\dots, D_{tK}\rbrace}$.

The groups of days can be anything (trading days, working days, Sundays + holidays assimilated to Sundays...)
ADD

We write $N_t=\sum_1^K{D_{ti}}$, the number of days of the period $t$

Two terms appear: 

- the specific effect of a type of day $i$ as a contrast between the number of days $i$ and the number of Sundays and bank holidays

- the effect of the month's (or period's) length. 

Once seasonally adjusted, this term comes down to the leap year effect:

- for all months except Februaries $\bar{N}_t = N_t$
- for Februaries $\bar{N}_t=28.25$ and $N_{t}=28$ or $N_{t}=29$ 

The effect of one day of the group $i$ is measured by $\alpha_i$, so that the global effect of the group $i$ for the period $t$ is $\alpha_i D_{ti}$

The global effect of all the days for the period $t$ is

$$\sum_{i=1}^K{\alpha_i D_{ti}} = \bar\alpha N_t + \sum_{i=1}^K{(\alpha_i-\bar\alpha) D_{ti}}$$

where $\bar\alpha=\sum_{i=1}^K{w_i \alpha_i}$ with $\sum_{i=1}^Kw_i=1$

So,

$$\sum_{i=1}^K{(\alpha_i-\bar\alpha) w_i} = \sum_{i=1}^K{\alpha_iw_i}-\bar\alpha\sum_{i=1}^K w_i=0 $$

LEAP YEAR part to comment

We focus now on $\sum_{i=1}^K{(\alpha_i-\bar\alpha) D_{ti}}$, the actual trading days effects (excluding the length of period effect).

Writing $\alpha_i-\bar\alpha = \beta_i$ and using that $\sum_{i=1}^K{\beta_i w_i} = 0$, we have that

$$\sum_{i=1}^K{\beta_i D_{ti}}=\sum_{i=1}^K{\beta_i(D_{ti} - \frac{w_i}{w_K}}D_{tK})= \sum_{i=1}^{K-1}{\beta_i(D_{ti} - \frac{w_i}{w_K}}D_{tK})$$

Note that the relationship is valid for any set of weights $w_i$. It is also clear that the contrasting group of days can be any group:

$$\sum_{i=1}^{K-1}{\beta_i(D_{ti} - \frac{w_i}{w_K}}D_{tK}) = \sum_{i=1}^{K, i \neq J}{\beta_i(D_{ti} - \frac{w_i}{w_J}}D_{tJ})$$

The "missing" coefficient is easily derived from the others:

$$\beta_K = -\frac{1}{w_K}\sum_{i=1}^{K-1}{\beta_i w_i}  $$

### Correction for deterministic seasonality

In the case of seasonal adjustment, we further impose that the regression variables don't contain deterministic seasonality. That is achieved by removing from each type of period (month, quarter...) its long term average. We write $\bar{D_i^y}$ the long term average of the yearly number of days in the group $i$ and $\bar{D_{i,J}^y}$ the long term average of the number of days in the group $i$ for the periods $J$ (for instance, average number of Mondays in January...).

The corrected contrast for the time t belonging to the period J is:

$$C_{ti}=D_{ti}-\bar{D_{i, J}^y}-\frac{w_i}{w_K}(D_{tK}- \bar{D_{K, J}^y})$$

How is the long term mean computed? Probabilistic approach


### Weights for different groups of days

We can define different sets of weights. The usual one consists in giving the same weight to each type of days. $w_i$ is just proportional to the number of days in the group $i$. In the case of "week days", $w_0 = \frac{5}{7}$ (weeks) and $w_1=\frac{2}{7}$ (week-ends). In the case of "trading days", $w_i=\frac{1}{7}$ ... Another approach consists in using the long term yearly averages, taking into account the actual holidays. We get now that $w_i=\frac{\bar{D_i^y}}{365.25}$.

After the removal of the deterministic seasonality, the variables computed using the two sets of weights considered above are very similar. In the case of the "trading days", the difference for the time $t$, belonging to the period $J$, and for the day $i$ with contrast $K$ is $(1-\frac{w_i}{w_K})(D_{tK}- \bar{D_{K, J}^y})$, which is usually small. By default, JD+ uses the first approach, which is simpler. The second approach is implemented in the algorithmic modules, but not available through the graphical interface.

### Use in RegArima models

In the context of RegArima modeling, we can also observe that the global effect of the trading days doesn't depend neither on the used weights (we project on the same space) nor on the contrasting group (see above) nor on the long term corrections (removed by differencing).

The estimated coefficients slightly change if we use different weights (not if we use a different contrasting group). It must also be noted that the choices affect the T-Stat of the different coefficients (not the joint F-Test), which can lead to other solutions when those T-Stats are used for selecting the regression variables (Tramo). Considering that the leap year/length of period variable is nearly independent of the other variables, the test on that variable is not very sensitive to the various specifications.

### Interpretation

The use of different specifications of the trading days doesn't impact the final results (except through some automatic selection procedure). It just (slightly) changes the way we interpret the estimated coefficients.

now let's get dow to practical steps

## Generating Regressors for calendar correction

unlike seasonality, calendar effects are corrected via regressors 
here we'll see how to build them

it always start with building a calendar (or using a default one) which will allow to take holidays into account, this is described here  

then regrssors will be bulit from calendars + info on distinguishing several types of days (more or less), mondays...

several cases, as regressors have the same data granularity as the input series 

- daily series : dummies for holidays, type of day in p=7

- monthly and quaterly series : regressors = aggregated indicators 
holidays are grouped with one day, and more or less groups

the goal is at the end to have regressors 
can be 

- built in 

- external, completely user defined 

once the calendar is defined the corresponding regressors can be generated and used 
in gui 
in R
Step 1: customizing calendars 
step 2: builind regressors 


There are three ways to build customized calendars taking into account national holidays

    - In the Graphical User Interface 

The resulting calendar will allow to generate customized regressors which can then be added while running a seasonal adjustment processing 
The customized calendar can be directly linked to the calendar correction option in GUI while running a seasonal adjustment processing (see SA chapter, link).


    - In R 

via GUI (link) or in R (link).

    - Directly writing xml files 


### In GUI

#### Customizing (Creating) calendars 

##### Pre-Defined Holidays (to be moved)

A *Special days* list is pre-defined for most commonly occurring holidays.

    {: .table .table-style}
      | **Holiday**    |    **Definition**| 
      ----------------- ----------------------------------------------------------------------------------------------------------------------------| 
     |  New Year       |   Fixed holiday, falls on January, 1.| 
     | Ash Wednesday   |   Moving holiday, occurring 46 days before Easter.| 
     | Easter          |   Moving holiday, varies between March, 22 and April, 25.| 
     |  Maundy Thursday|   Moving holiday, falls on the Thursday before Easter.| 
     |  Good Friday    |   Moving holiday, falls on the Friday before Easter.| 
     |  Easter Monday  |   Moving holiday, falls on the day after Easter.| 
     |  Ascension Day  |   Moving holiday, celebrated on Thursday, 40 days after Easter.| 
     |  Pentecost      |   Moving holiday, celebrated 50 days after Easter Sunday.| 
     |  Whit Monday    |   Moving holiday, falling on the day after Pentecost.| 
     |  May Day        |   Fixed holiday, falls on May, 1.| 
     |  Assumption     |   Fixed holiday, falls on August, 15.| 
     |  Halloween      |   Fixed holiday, falls on October, 31.| 
     |  All Saints Day |   Fixed holiday, falls on November, 1.| 
     |  Thanksgiving   |   Moving holiday, celebrated on the second Monday of October (Canada) or on the fourth Thursday of November (United States).| 
     | Christmas Day   |   Fixed holiday, falls on December, 25.| 

##### Default Calendar

In the graphical user interface, calendars in are stored in the *Workspace* window in the *Utilities* section. In the default calendar, country-specific national holidays are not taken into account, it reflects only the usual composition of the weeks in the calendar periods.

    ![Text](All_images/UG_CAL_image1.jpg)

    **The *Calendars* section in the *Workspace* window**

To view the details of the default calendar

    - double click on it

    ![Text](All_images/UG_CAL_image2.jpg)

    **The default view of the default calendar**

##### Set Properties

In the *Properties* panel the user can set:

-   Frequency (monthly, quarterly..)

-   Trading days or working days regressors

*Trading days*: 6 contrast variables ($number\ of\ Mondays - number\ of\ Sundays$,...) and one regressor for the leap year effect.

*Working Days*: 1 contrast variable ($number\ of\ working days (monday to friday) - number\ of\ Saturdays and Sundays$,...) and one regressor for the leap year effect.

![Text](All_images/UG_CAL_image3.jpg)

**Modification of the initial settings for the Default calendar**

##### Spectrum visualization

The top-right panel displays the spectrum for the given calendar variable. By default, the first variable from the table is shown.

-   To change it, click on the calendar variable header.

Calendar variables shouldn't have a peak neither at a zero frequency (trend) nor the seasonal frequencies.

![Text](All_images/UG_CAL_image6.jpg) \#### Modify an existing Calendar

-   click the option *Edit* from the context menu

-   the list of holidays defined for this calendar is displayed

![Text](All_images/UG_CAL_image12.jpg)

**Edit a calendar window**

-   To add a holiday unfold the **+** menu

-   To remove a holiday click on it and choose the **-** button ![Text](All_images/UG_CAL_image13.jpg)

**Removing a holiday from the calendar**

##### Creating a new calendar

An appropriate calendar, containing the required national holidays, needs to be created to adjust a series for country-specific calendar effects.

-   right click on the *Calendar* item from the *Workspace* window and choose **Add**

![Text](All_images/UG_CAL_image14.jpg)

Three options are available:

-   *National calendars*: allows to include country-specific holidays

-   *Composite calendars* : creates calendar as a weighted sum of several national calendars

-   *Chained calendars* : allows to chain two national calendars before and after a break

##### National Calendar

To define a national calendar: right click on Calendar item in the Utility panel of the workspace window

![Text](All_images/UG_CAL_image14.jpg)

-   To add a holiday unfold the **+** menu

-   To remove a holiday from the list click on it and choose the **-** button.

![Text](All_images/UG_CAL_image15.jpg)

Four options are available here:

    - **Fixed** : holiday occurring at the same date

    - **Easter Related**: holiday that depends on Easter Sunday date

    - **Fixed Week**: fixed holiday that always falls in a specific week of a given month

    - **Special Day**:  choose a holiday from a list of pre-defined holidays (link to table)

![Text](All_images/UG_CAL_image16.jpg)

-   to use Julian Easter

![Text](All_images/UG_CAL_image17.jpg)

    **The \*Julian Easter\* option**
    
To add a holiday from this list to the national calendar, choose the
	*Special day* item from the *Special days* list.

![Text](All_images/UG_CAL_image18.jpg)
**Adding a pre-defined holiday to the calendar**

By default, when the *Special Days* option is selected, JDemetra+ always adds *Christmas* to the list of selected holidays. The user can change this initial choice by specifying the settings in the panel on the right and clicking *OK*. The settings that can be changed include:

- **Start**: starting date for the holiday (expecting *yyyy-mm-dd*) Default is the starting date of the calendar (empty cell). 

- **End**: same as start

- **Weight** : specifies the impact of the holiday on the series. The default weight is 1 (full weight) assuming that the influence of the holiday is the same as a regular Sunday. If less  the a value between 0 and 1 can be assigned.

- **Day event**: a list of pre-defined holidays (link to table)

- **Offset**: allows to set a holiday as related to a pre-specified holiday by specifying the distance in days (e.g Easter Sunday). Default offset is 1. It can be positive or negative. Positive offset: defines a holiday following the pre-specified holiday. Negative offset: defines a holiday preceding the selected pre-specified.

	![Text](All_images/UG_CAL_image19.jpg)
**Choosing a pre-defined holiday from the list**

- To define a fixed holiday not included in the list of
    pre-defined holidays:
    - choose *Fixed* from the *Special days* list: by default January, 1 is displayed. Specify the settings:

- **Start**: starting date for the holiday (expecting *yyyy-mm-dd*) Default is the starting date of the calendar (empty cell). 

- **End**: same as start

- **Weight** : specifies the impact of the holiday on the series. The default weight is 1 (full weight) assuming that the influence of the holiday is the same as a regular Sunday. If less  the a value between 0 and 1 can be assigned.

- **Day**: day of month when the fixed holiday is celebrated.

- **Month**: month, in which the fixed holiday is celebrated.

![Text](All_images/UG_CAL_image20.jpg)

**Options for a fixed holiday**


- Add *Corpus Christi*: example of an Easter related holiday not included in the special day list(link to table). It is  is a moving holiday celebrated 60 days after Easter
    - choose the *Easter related* item from the *Special days* list.

	![Text](All_images/UG_CAL_image22.jpg)
By default *Easter + 1* is displayed. Setting can be changed :

- **Start**: starting date for the holiday (expecting *yyyy-mm-dd*) Default is the starting date of the calendar (empty cell). 

- **End**: same as start

- **Weight** : specifies the impact of the holiday on the series. The default weight is 1 (full weight) assuming that the influence of the holiday is the same as a regular Sunday. If less  the a value between 0 and 1 can be assigned.

- **Offset**: To define Corpus Christi enter **60**, as it is celebrated 60 days after Easter Sunday.

![Text](All_images/UG_CAL_image23.jpg)


- Fixed week option: when dealing with holidays occurring on the same week of a given month. Example: Labour Day in the USA and Canada, celebrated on the first Monday of September in Canada

    - choose *Fixed Week* from the *Special days* list.

	![Text](All_images/UG_CAL_image24.jpg)

Available settings are:

- **Start**: starting date for the holiday (expecting *yyyy-mm-dd*) Default is the starting date of the calendar (empty cell). 

- **End**: same as start

- **Weight** : specifies the impact of the holiday on the series. The default weight is 1 (full weight) assuming that the influence of the holiday is the same as a regular Sunday. If less  the a value between 0 and 1 can be assigned

- **Day of Week**: day of week when the holiday is celebrated each year

- **Month**: month, in which the holiday is celebrated each year

- **Week**: number denoting the place of the week in the month: between 1 and 5


![Text](All_images/UG_CAL_image25.jpg)


The list of the holidays should contain only unique entries. Otherwise, a warning, as shown in the picture below, will be displayed.

	
![Text](All_images/UG_CAL_image26.jpg)

A calendar without a name cannot be saved. Fill the *Name* box  before saving the calendar.

![Text](All_images/UG_CAL_image27.jpg)

Example : final view of a properly defined calendar for Poland 

![Text](All_images/UG_CAL_image28.jpg)


The calendar is visible in the *Workspace* window

- To display the available options right-click on it 

A national calendar can be edited, duplicated (to create another calendar) and/or analysed (double click to display it in the panel on the right) or deleted.

##### Chained Calendar

Creating a chained calendar is relevant when a major break occurs in the definition of the country-specific holidays.

First define the 2 (or $N$) national calendars corresponding to each regime as explained in the section above. 

To define a chained calendar: right click on Calendar item in the Utility panel of the workspace window

![Text](All_images/UG_CAL_image14.jpg)



In the *Properties* panel specify:

- first and the second calendar

- break date


![Text](All_images/UG_CAL_image32.jpg)

##### Composite Calendar

Creating a composite calendar is relevant when correcting series which
include data from more than one country/region. This option can be
used, for example, to create the calendar for the European Union or to
create the national calendar for a country, in which regional holidays
are celebrated.

First define the relevant national calendars corresponding to each member
state/region as explained above.

To define a chained calendar: right click on Calendar item in the Utility panel of the workspace window

![Text](All_images/UG_CAL_image34.jpg)

- Fill the name box

- Mark the regional calendars to be used

- Assign a weight to each calendar.

![Text](All_images/UG_CAL_image35.jpg)


##### Importing an existing calendar from a file

Right click on the *Calendar* item from the *Workspace* window and choose the *Import* item from the menu.

![Text](All_images/UG_CAL_image8.jpg)

**Importing a calendar to JDemetra+**

-   choose the appropriate file and open it

![Text](All_images/UG_CAL_image10.jpg)

**Choosing the file**

JDemetra+ adds it to the calendars list

![Text](All_images/UG_CAL_image11.jpg)

**A list of calendars with a newly imported calendar**

##### Example of a calendar file

example of a html file containing a calendar

![Text](All_images/UG_CAL_image9.jpg)
#### Generating regressors

##### Type of days


##### Leap year length of P 

adjust param 

##### Easter 


has to be declared in SA (o modelling params) ref to sa chapter

explain principle 

##### stock TD 

idem 

### In R 

In version 2 (RJDemetra), not possible to build calendars and generate regressors with jd+. Two approaches 

- use built in regressors (wd or td) not taking into account national holidays 
- import externally generated user defined calendar

(link to how to plug this in into a spec)

in version 3 new functionalities with `rjd3toolkit`

Concepts are identical to GUI (as detailed above)
Functions to replicate same processing in R

package 
link to doc 
examples

concepts identical to hses described in GUI section above
in rjd3toolkit package 
- help pages 
- vignette

here just some indications and examples 

#### Customizing (Creating) calendars 

##### National Calendar


```{r, eval=FALSE}
## French calendar
frenchCalendar <- national_calendar(days = list(
  fixed_day(7, 14), # Bastille Day
  fixed_day(5, 8, validity = list(start = "1982-05-08")),# End of 2nd WW
  special_day('NEWYEAR'), 
  special_day('CHRISTMAS'), 
  special_day('MAYDAY'),
  special_day('EASTERMONDAY'), 
  special_day('ASCENSION'), #
  special_day('WHITMONDAY'), 
  special_day('ASSUMPTION'), 
  special_day('ALLSAINTSDAY'),
  special_day('ARMISTICE'))
)

```

Holidays can be created with the following functions

1 fixed_day(7, 14)

```{r}
day <- fixed_day(month= 12, day=25,weight= .9, validity = list(start="1968-02-01", end = "2010-01-01"))
day # December 25th, with weight=0.9, from February 1968 until January 2010
```

2 special_day('ARMISTICE')
list 
a holidday can be defined from an event of the list
```{r, eval=FALSE}
# To define a holiday for the day after Christmas, with validity and weight
special_day("CHRISTMAS", offset = 1, weight = 0.8,
validity = list(start="2000-01-01", end = "2020-12-01"))
```



3 fixed week day

```{r, eval=FALSE}
fixed_week_day(7, 2, 3) # second Wednesday of July
```


4 easter related 
```{r, eval=FALSE}
     easter_day(1), # Easter Monday
     easter_day(-2), # Good Friday
```


An example of calendar bringing together all fucntions
```{r, eval=FALSE}

MyCalendar <- national_calendar(list(
    fixed_day(7,21),
     special_day('NEWYEAR'),
     special_day('CHRISTMAS'),
     fixed_week_day(7, 2, 3), # second Wednesday of July
     special_day('MAYDAY'),
     easter_day(1), # Easter Monday
     easter_day(-2), # Good Friday
     fixed_day(5, 8, validity = list(start = "1982-05-08")), # End of 2nd WW
     single_day("2001-09-11"), # appearing once 
     special_day('ASCENSION'),
     easter_day(offset=60,julian=FALSE, weight=0.5, validity = list(start="2000-01-01", end = "2020-12-01")),  # Corpus Christi
     special_day('WHITMONDAY'),
     special_day('ASSUMPTION'),
     special_day('ALLSAINTSDAY'),
     special_day('ARMISTICE')))

```

visualize long term means for a calendar
```{r, eval=FALSE}

### Long-term means of a calendar
BE <- national_calendar(list(
    fixed_day(7,21),
    special_day('NEWYEAR'),
    special_day('CHRISTMAS'),
    special_day('MAYDAY'),
    special_day('EASTERMONDAY'),
    special_day('ASCENSION'),
    special_day('WHITMONDAY'),
    special_day('ASSUMPTION'),
    special_day('ALLSAINTSDAY'),
    special_day('ARMISTICE')))
class(BE)
lt<-long_term_mean(BE,12,
    groups = c(1,1,1,1,1,0,0),
    holiday = 7)

```


##### Chained Calendar

Creating a chained calendar is relevant when a major break occurs in the definition of the country-specific holidays.

First define the 2 (or $N$) national calendars corresponding to each regime as explained in the section above. 

```{r, eval=FALSE}
Belgium <- national_calendar(list(special_day('NEWYEAR'),fixed_day(7,21)))
France <- national_calendar(list(special_day('NEWYEAR'),fixed_day(7,14)))
chained_cal<-chained_calendar(France, Belgium, "2000-01-01")
```


##### Composite Calendar

Creating a composite calendar is relevant when correcting series which
include data from more than one country/region. This option can be
used, for example, to create the calendar for the European Union or to
create the national calendar for a country, in which regional holidays
are celebrated.


```{r, eval=FALSE}
Belgium <- national_calendar(list(special_day('NEWYEAR'),fixed_day(7,21)))
France <- national_calendar(list(special_day('NEWYEAR'),fixed_day(7,14)))
composite_calendar<- weighted_calendar(list(France,Belgium), weights = c(1,2))
```

#### Generating regressors

First for monthly, Q, bi monthly...(set this right)

##### Type of days

Two approches 
- use default calendar (no specifc holidays taken into avccout)

- use customized calendar 

Trading day regressors without holidays

The rjd3toolkit::td function

```{r, eval=FALSE}
# Monthly regressors for Trading Days: each type of day is different
# contrasts to Sundays (6 series)
regs_td<- td(12,c(2020,1),60, groups = c(1, 2, 3, 4, 5, 6, 0), contrasts = TRUE)

```


Trading day regressors with pre-defined holidays

The rjd3toolkit::calendar_td function
```{r, eval=FALSE}
BE <- national_calendar(list(
    fixed_day(7,21),
    special_day('NEWYEAR'),
    special_day('CHRISTMAS'),
    special_day('MAYDAY'),
    special_day('EASTERMONDAY'),
    special_day('ASCENSION'),
    special_day('WHITMONDAY'),
    special_day('ASSUMPTION'),
    special_day('ALLSAINTSDAY'),
    special_day('ARMISTICE')))
calendar_td(BE, 12, c(1980,1), 240, holiday=7, groups=c(1,1,1,2,2,3,0),
contrasts = FALSE)
```


##### Leap year length of P 

adjust param 

##### Easter 

explicitly create a regressor

the rjd3toolkit::easter_variable
cf help pages for details

```{r}
#Monthly regressor, five-year long, duration 8 days, effect finishing on Easter Monday
ee<-easter_variable(12, c(2020,1),length=5*12,duration=8, endpos=1)
```

additionnal fuctionnality in R 

Display Easter Sunday dates in given period
Description
Allows to display the date of Easter Sunday for each year, in the defined period. Dates are displayed in "YYYY-MM-DD" format and as a number of days since January 1st 1970.


```{r, eval=FALSE}
#Dates from 2018(included) to 2023 (included)
easter_dates(2018, 2023)
```


##### stock TD 

cf book x12 and SH

The regressor will have the value -1 if the w-th day is a Sunday, 1 if it is a Monday as 0 otherwise.

example lacking in the package 


##### Daily data (dummies)

```{r}
## dummies corresponding to holidays
q<-holidays(BE, "2020-01-01",365.25, type="All")
tail(q)
```

###### Weekly data


## Test for Residual Calendar effects 

- test
- where to find it : GUI and R

We consider below tests on the seasonally adjusted series ($sa_t$) or on the irregular component ($irr_t$). When the reasoning applies on both components, we will use $y_t$. The functions $stdev$ stands for "standard deviation" and $rms$ for "root mean squares"

The tests are computed on the log-transformed components in the case of multiplicative decomposition.

TD are the usual contrasts of trading days, 6 variables (no specific calendar).

#### Non significant irregular

When $irr_t$ is not significant, we don't compute the test on it, to avoid irrelevant results. We consider that $irr_t$ is significant if $stdev( irr_t)>0.01$ (multiplicative case) or if $stdev(irr_t)/rms(sa_t) >0.01$ (additive case).

#### F test

The test is the usual joint F-test on the TD coefficients, computed on the following models:

##### Autoregressive model (AR modelling option)

We compute by OLS:

$$y_t=\mu + \alpha y_{t-1} + \beta TD_t + \epsilon_t $$

##### Difference model

We compute by OLS:

$$\Delta y_t - \overline{\Delta y_t}=\beta TD_t + \epsilon_t $$

So, the latter model is a restriction of the first one ($\alpha =1, \mu =μ=\overline{\Delta y_t}$)

The tests are the usual joint F-tests on $\beta \quad (H_0:\beta=0)$.

By default, we compute the tests on the 8 last years of the components, so that they might highlight moving calendar effects.

Remark:

In Tramo, a similar test is computed on the residuals of the Arima model. More exactly, the F-test is computed on $e_t=\beta TD_t + \epsilon_t$, where $e_t$ are the one-step-ahead forecast errors.



