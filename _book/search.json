[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "JDemetra+ documentation",
    "section": "",
    "text": "Preface\nWelcome to the JDemetra+ on-line documentation.\nJDemetra+ is an open-source software for seasonal adjustment and time series analysis, developed in the framework of Eurostat’s “Centre of Excellence on Statistical Methods and Tools” by the National Bank of Belgium with the support of the Bundesbank and Insee.\nTo learn more about this project you can visit Eurostat CROS Portal.\nTo keep up with all JDemetra+ related news head to the JDemetra+ Universe Blog\nThis website is under construction, in the meantime you can fill a large number of the gaps by referring to the previous version of the on-line documentation, coordinated by Sylwia Grudkowska-Kubik(National Bank of Poland).\nEurostat’s recommendations on the statistical processes described in this documentation are outlined in:\n\nEurostat’s Guidelines on seasonal adjustment (2015)\nEurostat’s Guidelines on temporal disaggregation, benchmarking and reconcilation (2018)\n\nKey methodological explanations and state-of-the-art description and references can be found in:\n\nHandbook on seasonal adjustment (2018)\nHandbook on rapid estimates (2017)"
  },
  {
    "objectID": "G-what-is-jd.html#introduction",
    "href": "G-what-is-jd.html#introduction",
    "title": "JDemetra+ Software",
    "section": "Introduction",
    "text": "Introduction\nJDemetra+ is an open source software for seasonal adjustment and time series analysis. It has been officially recommended by Eurostat to the European Statistical System members since 2015. It is unique in its combination of very fast Java routines, a graphical user interface and a family of R packages. The graphical interface offers a structured and visual feedback, suitable for refined analysis and training. R tools allow the user to mix the capabilities of JDemetra+ with the versatility of the R world, be it for mathematical functions or data wrangling.\nVersion 2.x and version 3\nVersion 3.0 to be released by the summer of 2023, fills several critical gaps in the tool box of a time series analyst providing extended features for seasonal adjustment and trend estimation, including high frequency data and production tools."
  },
  {
    "objectID": "G-what-is-jd.html#structure-of-this-book",
    "href": "G-what-is-jd.html#structure-of-this-book",
    "title": "JDemetra+ Software",
    "section": "Structure of this book",
    "text": "Structure of this book\nThis book is divided in 3 parts, allowing the user to access the resources from different perspectives.\n\nAlgorithms\nThis part provides a step by step guidance for using of all the algorithms featured in JDemetra+:\n\nSeasonal Adjustment\nSeasonal Adjustment of high-frequency data\nReg-Arima modelling\nOutlier detection and external regressors\nCalendar correction\nBenchmarking and temporal disaggregation\nTrend-Cycle estimation\nNowcasting\n\nOutput series, diagnostics, as well as parameters (automatically estimated or user-defined) are detailed in the relevant chapters.\n\n\nTools\nThis part describes the tools allowing to access JDemetra+ algorithms:\n\nGraphical User Interface GUI\n…enhanced with additional plug-ins\n..and a Cruncher for mass production\nR packages\n\n\n\nMethods\nThis part describes in greater detail the core algorithms and their underlying statistical methods:\n\nReg-Arima modelling\nX-11: moving average based decomposition\nSEATS: Arima model based decomposition\nSTL: Loess based decomposition\nBenchmarking and temporal disaggregation\nSpectral analysis tools\nTrend Estimation\nTests for seasonality and residuals\nStructural time series and state space framework"
  },
  {
    "objectID": "G-jd-history.html#in-this-chapter",
    "href": "G-jd-history.html#in-this-chapter",
    "title": "How JDemetra+ came to be",
    "section": "In this chapter",
    "text": "In this chapter\n\nhistory of the project, people who built the software\nevolution of the software\n\n\nTime line"
  },
  {
    "objectID": "P_Algorithms.html",
    "href": "P_Algorithms.html",
    "title": "Algorithms",
    "section": "",
    "text": "This part describes the algorithms featured in JDemetra+:\n\nSeasonal Adjustment\nSeasonal Adjustment of high-frequency data\nReg-Arima modelling\nOutlier detection and external regressors\nCalendar correction\nBenchmarking and temporal disaggregation\nTrend-Cycle estimation\nNowcasting"
  },
  {
    "objectID": "A-sa.html#chapters-overview",
    "href": "A-sa.html#chapters-overview",
    "title": "Seasonal Adjustment",
    "section": "Chapter’s overview",
    "text": "Chapter’s overview\nThe goal of seasonal adjustment is to remove seasonal fluctuations from a time series. Seasonal fluctuations are quasi-periodic infra-annual movements. They can mask evolution of greater interest for the user such as short term evolution or long time trends.\nThis chapter focuses on the practical step by step use of JDemetra+ algorithms, restricted to monthly and quarterly series. For infra-monthly data see the following chapter. The use of graphical user interface and R packages is described simultaneously whenever relevant.\nIn-depth methodological explanations of the algorithms are covered in separated chapters, in the Methods part.\nMore information on the steps and best practices of a seasonal adjustment process can be found in the Eurostat guidelines on seasonal adjustment\nFor an overview on the algorithms and methodological issues, please refer to the Handbook on Seasonal Adjustment"
  },
  {
    "objectID": "A-sa.html#seasonal-adjustment-algorithms",
    "href": "A-sa.html#seasonal-adjustment-algorithms",
    "title": "Seasonal Adjustment",
    "section": "Seasonal Adjustment Algorithms",
    "text": "Seasonal Adjustment Algorithms\n\nX13-Arima and Tramo-Seats are two-step algorithms with a pre-treatment phase (Reg-Arima or Tramo) and a decomposition phase (X11 and Seats). STL is a local regression (Loess) based decomposition, without pre-treatment. In a Structural Time Series approach pre-treatment and decomposition are done simultaneously in a State Space Framework (SSF).\n\n\nAlgorithm\nAccess in GUI\nAccess in R (v2)\nAccess in R v3\n\n\n\n\nX-13 Arima\nyes\nRJDemetra\nrjd3x13\n\n\nReg-Arima only\nyes\nRJDemetra\nrjd3x13\n\n\nX11 decomposition only\nyes\nRJDemetra\nrjd3x13\n\n\nTramo-Seats\nyes\nRJDemetra\nrjd3tramoseats\n\n\nTramo only\nyes\nRJDemetra\nrjd3tramoseats\n\n\nSTL\nno\nno\nrjd3stl\n\n\nSTS\nno\nno\nrjd3sts\n\n\n\n\nDecomposition in unobserved components\nTo seasonally adjust a series, seasonal factors \\(S_{t}\\) will be estimated and removed from the original raw series: \\(Y_{sa}=Y_{t}/S_{t}\\) or \\(Y_{sa}=Y_{t}-S_{t}\\). To do so the series is first decomposed into unobservable components. Two decomposition models:\n\nThe additive model: \\(X_{t} = T_{t} + S_{t} + I_{t}\\);\nThe multiplicative model: \\(X_{t} = T_{t} \\times S_{t} \\times I_{t}\\).\n\nThe main components, each representing the impact of certain types of phenomena on the time series (\\(X_{t}\\)), are:\n\nThe trend (\\(T_{t}\\)) that captures long-term and medium-term behaviour;\nThe seasonal component (\\(S_{t}\\)) representing intra-year fluctuations, monthly or quarterly, that are repeated more or less regularly year after year;\nThe irregular component (\\(I_{t}\\)) combining all the other more or less erratic fluctuations not covered by the previous components.\n\nIn general, the trend consists of 2 sub-components:\n\nThe long-term evolution of the series;\nThe cycle, that represents the smooth, almost periodic movement around the long-term evolution of the series. It reveals a succession of phases of growth and recession. Trend and cycle are not separated in SA algorithms.\n\n\n\nPre-treatment principles\nThe goal of this step is to remove deterministic effects (calendar and outliers) in order to improve the decomposition.\n\\[\nY_t = \\sum {\\alpha}_i O_{it} + \\sum\\beta_j C_{jt} + \\sum {\\gamma}_i U_{it} + Y_{lin,t}\n\\]\n\n\\(O_{it}\\) are the \\(i\\) final outliers (AO, LS, TC)\n\\(C_{it}\\) are the calendar regressors (automatic or user-defined) (link to calendar chap)\n\\(U_{it}\\) are all the other user-defined regressors (link to outliers and regressors chap)\n\\(Y_{lin,t} \\sim ARIMA(p,d,q)(P,D,Q)\\)\n\n\n\nDetecting seasonal patterns\nA large number of seasonality tests are available in JDemetra+. They can be accessed in the graphical user interface or via R.\nIn rjd3toolkit package:\n\nCanova-Hansen (seasonality.canovahansen())\nX-12 combined test (seasonality.combined())\nF-test on seasonal dummies (seasonality.f())\nFriedman Seasonality Test (seasonality.friedman())\nKruskall-Wallis Seasonality Test (seasonality.kruskalwallis())\nPeriodogram Seasonality Test (seasonality.periodogram())\nQS Seasonality Test (seasonality.qs())"
  },
  {
    "objectID": "A-sa.html#pre-pro-spec",
    "href": "A-sa.html#pre-pro-spec",
    "title": "Seasonal Adjustment",
    "section": "Pre-treatment: Reg-Arima or Tramo",
    "text": "Pre-treatment: Reg-Arima or Tramo\nThe following sections cover how to perform pre-treatment with Reg-ARIMA (or Tramo) algorithms. Tramo and the Reg-Arima part of X13-Arima rely on very similar principles: Reg-Arima modelling. Thus Tramo will be mentioned only to highlight differences with the Reg-Arima part of X13-Arima. Reg-Arima modelling part can be of a seasonal adjustment process or run on its own, we focus on performing pre-treatment as part of a SA processing.\n\nDefault Specifications\nDefault specifications are set for the whole SA procedure, pre-treatment and decomposition. They are slightly different for X13-ARIMA and Tramo-Seats and can be modified with user defined parameters.\n\nStarting point for X13-ARIMA\n\n\n\n\n\n\n\n\n\n\nSpec identifier\nLog/level detection\nOutliers detection\nCalendar effects\nARIMA\n\n\n\n\nRSA0\nNA\nNA\nNA\nAirline(+mean)\n\n\nRSA1\nautomatic\nAO/LS/TC\nNA\nAirline(+mean)\n\n\nRSA2c\nautomatic\nAO/LS/TC\n2 TD vars+Easter\nAirline(+mean)\n\n\nRSA3\nautomatic\nAO/LS/TC\nNA\nautomatic\n\n\nRSA4c\nautomatic\nAO/LS/TC\n2 TD vars+Easter\nautomatic\n\n\nRSA5\nautomatic\nAO/LS/TC\n7 TD vars+Easter\nautomatic\n\n\nX-11\nNA\nNA\nNA\nNA\n\n\n\nexplanations:\n\nNA: non applied, for example in RSA3 there is no calendar effect correction\nautomatic: test is performed\n\noutliers detection: AO/LS/TC type of outliers automatically detected under a critical T-Stat value (default value=4)\ncalendar:\n\n2 regressors: weekdays vs week-ends + LY\n7 regressors: each week day vs Sundays + LY\nalways tested\neaster tested (default length = 6 days in Tramo, 8 days in X13-Arima)\n\n\n\nStarting point for Tramo-Seats\n\n\n\n\n\n\n\n\n\n\nSpec identifier\nLog/level detection\nOutliers detection\nCalendar effects\nARIMA\n\n\n\n\nRSA0\nNA\nNA\nNA\nAirline(+mean)\n\n\nRSA1\nautomatic\nAO/LS/TC\nNA\nAirline(+mean)\n\n\nRSA2\nautomatic\nAO/LS/TC\n2 TD vars+Easter\nAirline(+mean)\n\n\nRSA3\nautomatic\nAO/LS/TC\nNA\nautomatic\n\n\nRSA5\nautomatic\nAO/LS/TC\n6 TD vars+Easter\nautomatic\n\n\nRSAfull\nautomatic\nAO/LS/TC\nautomatic\nautomatic\n\n\n\n\n\n\nUser-defined specifications\nPrinciple of user setting parameters: can be done from one of the default specifications or any specification in a “Save as” mode very similar in GUI and R, see below.\nThe user may add new seasonal adjustment specifications to the Workspace window. To do it, go to the Seasonal adjustment section, right click on the tramoseats or x13 item in the specifications node and select New from the local menu.\n\n\n\nCreating a new specification in the Seasonal adjustment section\n\n\nNext, double click on the newly created specification, change the settings accordingly and confirm with the OK button.\n\n\n\nChanging settings of seasonal adjustment specification\n\n\n\n\nSpans\n\nEstimation span\nSpecifies the span (data interval) of the time series to be used in the seasonal adjustment process. The user can restrict the span\nCommon settings\n\n\n\n\n\n\n\n\nOption\nDescription (expected format)\n\n\n\n\n\nAll\ndefault\n\n\n\nFrom\nfirst observation included (yyyy-mm-dd)\n\n\n\nTo\nlast observation included (yyyy-mm-dd)\n\n\n\nBetween\ninterval [from ; to] included (yyyy-mm-dd to yyyy-mm-dd)\n\n\n\nFirst\nnumber of obs from the beginning of the series included (dynamic) (integer)\n\n\n\nLast\nnumber of obs from the end of the series (dynamic)(integer)\n\n\n\nExcluding\nexcluding N first obs and P last obs from the computation,dynamic) (integer)\n\n\n\nPreliminary check\ncheck to exclude highly problematic series e.g. the series with a number of identical observations and/or missing values above pre-specified threshold values. (True/False)\n\n\n\n\nSetting series span in GUI\nUse the specification window for a given series and expand the nodes.\n\nSetting series span in R\nx13 in version 2\n\nlibrary(\"RJDemetra\")\n# estimation interval: option with static dates\nuser_spec_1&lt;-x13_spec(spec = c(\"RSA5c\", \"RSA0\", \"RSA1\", \"RSA2c\", \n                               \"RSA3\", \"RSA4c\", \"X11\"), \npreliminary.check = TRUE, \nestimate.from = \"2012-06-01\", \nestimate.to = \"2019-12-01\") \n\n# estimation interval: option with dynamic numbers of observations\n\n# \n# spec can be applied on different series and therefore exclude different dates\nuser_spec_2&lt;-x13_spec(spec = c(\"RSA5c\", \"RSA0\", \"RSA1\", \"RSA2c\", \"RSA3\", \"RSA4c\", \"X11\"), \nestimate.first = 12) \n\n# eestimation on the last 120 obs\nuser_spec_3&lt;-x13_spec(spec = c(\"RSA5c\", \"RSA0\", \"RSA1\", \"RSA2c\", \"RSA3\", \"RSA4c\", \"X11\"), \nestimate.last = 120)\n\n#excluding first 24 and last 36 observations\nuser_spec_4&lt;-x13_spec(spec = c(\"RSA5c\", \"RSA0\", \"RSA1\", \"RSA2c\", \"RSA3\", \"RSA4c\", \"X11\"), \nestimate.exclFirst = 24, \nestimate.exclLast = 36)\n\n# Retrieve settings\n\nFor comprehensive details about x13_spec function see RJDemetra R help pages.\nTramo-Seats in version 2\n\n#excluding first 24 and last 36 observations\nuser_spec_1&lt;-tramoseats_spec( spec = c(\"RSAfull\", \"RSA0\", \"RSA1\", \"RSA2\", \"RSA3\", \"RSA4\", \"RSA5\"),  \nestimate.exclFirst = 24, \nestimate.exclLast = 36)\n\nFor comprehensive details about tramoseats_spec function see RJDemetra R help pages.\n\n\nSetting model span\nThe user can also specify the span (data interval) of the time series to be used for the estimation of the Reg-ARIMA model coefficients. It allows to impede a chosen part of the data from influencing the regression estimates. Setting works the same way as setting series (estimation) span described above.\nAdditional (vs series span setting) parameters are described below:\n\n\n\n\n\n\n\nTolerance\nConvergence tolerance for the non-linear estimation.\nThe absolute changes in the log-likelihood are compared to Tolerance to check the convergence of the estimation iterations.\nThe default setting is 0.0000001.\n\n\nTramo specific parameters\n\n\n\nExact ML\nWhen this option is marked, an exact maximum likelihood estimation is performed.\nAlternatively, the Unconditional Least Squares method is used.\nHowever, in the current version of JDemetra+ it is not recommended to change this parameter’s value\n\n\nUnit Root Limit\nLimit for the autoregressive roots. If the inverse of a real root of the autoregressive polynomial of the\nARIMA model is higher than this limit, the root is set equal to 1. The default parameter value is 0.96.\n\n\n\nSetting model span in GUI:\nUse the specification window\n\nSetting in R\nTramo example in version 2\n\n#excluding first 24 and last 36 observations\nuser_spec_1&lt;-tramoseats_spec( spec = c(\"RSAfull\", \"RSA0\", \"RSA1\", \"RSA2\", \"RSA3\", \"RSA4\", \"RSA5\"),  \nestimate.tol = 0.0000001, \nestimate.eml = FALSE, \nestimate.urfinal = 0.98)\n\n\n\n\nDecomposition Scheme\n\nParameters\nTransformation test: a test is performed to choose between an additive decomposition (no transformation) (link to reg A chap to detail this)\nSettings\nFunction\ntransform {function=}\nTransformation of data. 2 The user can choose between:\nNone – no transformation of the data;\nLog – takes logs of the data;\nAuto – the program tests for the log-level specification. This option is recommended for automatic modelling of many series.\nThe default setting is Auto.\nReg-Arima specific settings\nAIC difference\ntransform {aicdiff=}\nDefines the difference in AICC needed to accept no transformation over a log transformation when the automatic transformation\nselection option is invoked. The option is disabled when Function is not set to Auto. The default AIC difference value is -2.\nAdjust\ntransform {adjust=}\nOptions for proportional adjustment for the leap year effect. The option is available when Function is set to Log. Adjust can be set to:\nLeapYear – performs a leap year adjustment of monthly or quarterly data;\nLengthofPeriod – performs a length-of-month adjustment on monthly data or length-of-quarter adjustment on quarterly data;\nNone – does not include a correction for the length of the period.\nThe default setting is None\nTramo specific settings\nFct\nTransformation; fct\nControls the bias in the log/level pre-test (the function is active when Function is set to Auto); Fct &gt; 1 favours levels, Fct &lt; 1 favors logs. The default setting is 0.95.\nSet in GUI\n\n\n\nModel span setting\n\n\nSet and in R\nX13\n\n#excluding first 24 and last 36 observations\nuser_spec &lt;-x13_spec(spec = c(\"RSA5c\", \"RSA0\", \"RSA1\", \"RSA2c\", \"RSA3\", \"RSA4c\", \"X11\"), \ntransform.function =\"Log\", # choose from: c(NA, \"Auto\", \"None\", \"Log\"),\ntransform.adjust = \"LeapYear\", #c(NA, \"None\", \"LeapYear\", \"LengthOfPeriod\"),\ntransform.aicdiff = -3)\n#Retrieve settings: to complete*\n\nTramo-Seats settings\n\n#transfo\nuser_spec_1&lt;-tramoseats_spec( spec = c(\"RSAfull\", \"RSA0\", \"RSA1\", \"RSA2\", \"RSA3\", \"RSA4\", \"RSA5\"),  \ntransform.function = \"Auto\", #c(NA, \"Auto\", \"None\", \"Log\"), \ntransform.fct = 0.5)\n# Retrieve settings: to complete \n\n\n\n\nCalendar correction\nSome calendar correction options included in the starting specifications for X13-Arima or Tramo-Seats, they can be fine-tuned by modifying specifications. The following section lists all the available options, illustrates how to set them in GUI or R and shows have to retrieve used parameters, regressors as well as results.\nJDemetra+ offers two default options for calendar correction working days regressors and trading days regressors, with Leap-year effect if needed. Those options don’t take into account national calendars (link) and their specific holidays. There are two ways to change this:\n\nuser-defined regressors (link)\ncustomized calendars (link)\n\nOverview: what you can do\nNeed 1: correct for working days, trading days (+ easter) not taking national calendars\nNeed 2: taking national calendar into account Solutions\n\nadd a work of means of allocating regressors to the calendar component\n\n\nAvailable Options\n\nTrading Days\n“Trading Days” has two meanings: general calendar correction process (here without easter effect) and one of the options of this correction (see below)\n-    \"None\": no correction for trading days and working days effects\n\n-    \"Default\": JDemetra + built regressors (xorking days or trading days)\n\n-    \"Holidays\": same as above but taking into accoutn a national calendar,                  available on ly in GUI, R interface requires direct use of pre-built                   regressors \n\n-     \"UserDefined\": user-defined trading days regressors (see below)\n\n-    (if NONE) indicating the day of the month when inventories and other stock are reported (to denote the last day of the month, set the variable to 31). \n\n\nLeap Year effect\nAutoadjust\nIf enabled, the program corrects automatically for the leap year effect.. When is the option available Modifications of this variable are taken into account only when transform.function is set to “Auto”.\nLeapyear\nto specify whether or not to include the leap-year effect in the model: - “LeapYear”: leap year effect; - “LengthOfPeriod”: length of period, - “None” = no effect included.\nThe leap-year effect can be pre-specified in the model only if the input series hasn’t been pre-adjusted (transform.adjust set to “None”) and if the automatic correction for the leap-year effect isn’t selected (tradingdays.autoadjust set to FALSE).\n\n\n\nTest\nTest: defines the pre-tests for the significance of the trading day regression variables based on the AICC statistics: “Add” = the trading day variables are not included in the initial regression model but can be added to the RegARIMA model after the test; “Remove” = the trading day variables belong to the initial regression model but can be removed from the RegARIMA model after the test; “None” = the trading day variables are not pre-tested and are included in the model.\n\nEaster\nEaster.enabled a logical. If TRUE, the program considers the Easter effect in the model.\neaster.Julian a logical. If TRUE, the program uses the Julian Easter (expressed in Gregorian calendar).\neaster.duration a numeric indicating the duration of the Easter effect (length in days, between 1 and 20).\neaster.test defines the pre-tests for the significance of the Easter effect based on the t-statistic (the Easter effect is considered as significant if the t-statistic is greater than 1.96): “Add” = the Easter effect variable is not included in the initial regression model but can be added to the RegARIMA model after the test; “Remove” = the Easter effect variable belongs to the initial regression model but can be removed from the RegARIMA model after the test; “None” = the Easter effect variable is not pre-tested and is included in the model.\nA user-defined regressor can also be used, see chapter on calendar correction\n(to be added: additional options in Tramo)\n\n\n\nSetting Calendar correction in GUI\n\nUsing default options (without national calendars)\nIn GUI Use the specification window\nCalendar effects\nSTEP 1: Selection from JDemetra+ Default…or User_defined\n\nSA_REGA_calendar_options.png\nSTEP2: Calendar effects minus Easter are labeled trading days\n\n\n\nHolidays option\nusing a customized calendar just show how to fetch it building process in calendar chapter\n\nMissing: stock td option, length-of-period\nUser-defined regressors: adding see below\nLink to Import data Once data imported: here explain how to link variables\n\n\nEaster\n\n\n\n\nSetting Calendar correction in R\nIn version 2\n\n# Parameter choice NA=...\n  tradingdays.option = c(NA, \"TradingDays\", \"WorkingDays\", \"UserDefined\", \"None\"),\n  tradingdays.autoadjust = NA,\n  tradingdays.leapyear = c(NA, \"LeapYear\", \"LengthOfPeriod\", \"None\"),\n  tradingdays.stocktd = NA_integer_,\n  tradingdays.test = c(NA, \"Remove\", \"Add\", \"None\"),\n  easter.enabled = NA,\n  easter.julian = NA,\n  easter.duration = NA_integer_,\n  easter.test = c(NA, \"Add\", \"Remove\", \"None\"),\n# example \n\nIn version 3 (Under construction)\n\n\nUser defined regressors\nIf User Defined options is used for trading days, regressors have to be provided by the user.\nBuilding Regressors The underlying methodology and implementation in JDemetra+ to build these regression variables are provided here\n\nAdding Regressors in GUI\nStep 1: import data set containing the regressors, general procedure explained here\nStep 2: Link the regressors to the workspace, procedure detailed here\nStep 3: Modify specifications Modifications are done the same way in a global specification (whole SAP) or series by series.\n\nselect trading days User-defined option and select variables\n\nIn the specification window, click right from “userVariables” on “Unused” to open the variable selection window\n\nMove right the chosen regressors\n\n\nset TEST option (expl)\n\n\n\n\nAdding Regressors in R\n“UserDefined” = user-defined trading days regressors (regressors must be defined by the usrdef.var argument with usrdef.varType set to “Calendar” and usrdef.varEnabled = TRUE).\n\n# example \nspec_4 &lt;- x13_spec(spec = spec_1, \n                   tradingdays.option = \"UserDefined\", \n                   tradingdays.test = \"None\", \n                   usrdef.varEnabled = TRUE, \n                   usrdef.varType = \"Calendar\", \n                   usrdef.var = reg3) # set of regressors in TS format\n\n\n\n\nRetrieving Results\nThe following section details how to retrieve results (parameters, regressors, regression coefficients and tests) when using GUI or R interface.\n\nParameters\nParameters are regressors used in fine. If non test options, parameters are known If test options are selected by the algorithm.\nIn GUI\nAutomatically chosen or user-defined calendar options (as well as other pre-adjustment options) are displayed at the top of the MAIN Results NODE displayed by clicking on a given series name in the SAProcessing panel.\n\nIn R\n(to be added)\nversion 2: RJDemetra\nversion 3: rjd3x13 or rjd3tramoseats\n\n\nRegressors\nIn GUI All regressors in the pre-adjustment phase (calendar, outliers, external) are displayed in the pre-processing-regressors node.\n\nIn R\n(to be added)\nVersion 2\nversion 3\n\n\nRegression results\nRegressions results\nIn GUI\nThe results of the whole Reg-Arima regression (link to last section) including calendar effects (below) are displayed in the pre-processing panel.\n\nIn R\n\n\nTest for residual trading-days effects\nResidual calendar effects are tested with A F-Test 7 regressors and no national calendar, on sa final series and on irregular component (link to calendar chapter for test details)\nIn GUI\nF-Test results are displayed at the bottom of Main Results NODE in the SAProcessing panel\n\nIn R\n\n\n\nCustomizing Calendars\nThe following describes how to take a national calendar into account.\nSolution 1: if working with GUI build a new calendar in GUI (here\n(to be added: GUI: how to use it or customize HTML file structure explanation)\nset this option in GUI\n(to be added: image: spec window calendar / holidays / choice of calendars)\nset this option in R (to be added) version 2:\nversion 3:\nsolution 2: import external regressors, which can be built with rjd3toolkit (link) which can then be used in via are or imported via GUI\nset this option in GUI how to import variables into JD+ / set utility (in interface chapter) classical user defined\nset this option in R version 2:\nversion 3\nOnce the calendar regressors are set, the RegArima (tramo) model will be estimated globally with all the other regression variables and taking into account Arima model specificities as well. That is why diagnostics are all jointly displayed at the end of the process. (link)\n(to be added: worked example: french calendar in R)\n\n\n\nOutliers\nThe sections below focus on\n\noutlier detection parameters (type and critical value)\npre-specifying outliers in a seasonal adjustement (reg-arima modelling) process\n\nAdditional information can be found in this chapter.\n\nOptions for automatic detection\n*Is enabled** outliers; iatip\n  Enables/disables the automatic detection of outliers in the span determined by the **Detection span** option. By default, the checkbox is marked, which implies that the automatic identification of outliers is enabled.\n\nUse default critical value outliers; va\nThe critical value is automatically determined by the number of observations in the interval specified by the Detection span option. When Use default critical value is disabled, the procedure uses the critical value inputted in the Critical value item (see below). Otherwise, the default value is used (the first case corresponds to “critical = xxx”; the second corresponds to a specification without the critical argument). It should be noted that it is not possible to define a separate critical value for each outlier type. By default, the checkbox is marked, which implies that the automatic determination of the critical value is enabled.\n\nCritical value outliers; va\nThe critical value used in the outlier detection procedure. The option is active once Use default critical value is disabled. By default, it is set to 3.5.\nDetection span $$ type outliers; int1, int2*\nA span of the time series to be searched for outliers. The possible values of the parameter are:\n\nAll – full time series span is considered in the modelling;\nFrom – date of the first time series observation included in the pre-processing model;\nTo – date of the last time series observation included in the pre-processing model;\nBetween – date of the first and the last time series observations included in the pre-processing model;\nLast – number of observations from the end of the time series included in the pre-processing model;\nFirst – number of observations from the beginning of the time series included in the pre-processing model;\nExcluding – number of observations excluded from the beginning (specified in the first field) and/or end of the time series (specified in the last field) of the pre-processing model.\n\nWith the options Last, First, Excluding the span can be computed dynamically on the series. The default setting is All.\nAdditive outliers; aio*\nAutomatic identification of additive outliers. By default, this option is enabled.\n\nLevel shift outliers; aio*\nAutomatic identification of level shifts. By default, this option is enabled.\nTransitory change outliers; aio*\nAutomatic identification of transitory changes. By default, this option is enabled.\nSeasonal outlier outliers; aio*\nAutomatic identification of seasonal outliers. By default, this option is disabled. Tramo specific\nEML estimation outliers; imvx\nThe estimation method used in the automatic model identification procedure. By default, the fast method of Hannan-Rissanen is used for parameter estimation in the intermediate steps of the automatic detection and correction of outliers. When the checkbox is marked the exact maximum likelihood estimation method is used.\nTC rateoutliers; deltatc\nThe rate of decay for the transitory change outlier. It takes values between 0 and 1. The default value is 0.7.\n\n\n\nOptions for pre-specified outliers\nUser-defined outliers are used when prior knowledge suggests that certain effects exist at known time points[^14]. Four pre-defined outlier types, which are simple forms of intervention variables, are implemented: * Additive Outlier (AO); * Level shift (LS); * Temporary change[^15] (TC); * Seasonal outliers (SO).\n\n\nSetting in GUI\nAutomatic detection\n\n\nPre-specified\n\n\n\nSetting in R\n(to be added)\n\n\nRetrieving results\n\nParameters\nIn GUI\nIn main results NODE (same info at top of pre-processing NODE)\n\n\n\nRegressors\nIn GUI\n\nIn R\n(to be added)\n\n\nRegression details\nIn GUI\n\nIn R\n(to be added)\n\n\n\n\nUser-defined regressors\n(to be added)\n\nrationale\nparameters: assign to a component\n\nPre-treatment regression with additional outliers\n\\[\nY_t = \\sum \\hat{\\alpha}_i O_{it} + \\sum\\hat\\beta_j C_{jt} + \\sum\\hat\\gamma_k Reg_{kt} + y_{lin_t}\n\\]\n\nAllocation to components\n\\(reg= reg_{i}+reg_{t}+reg_{s}+...\\) The user-defined regression variable associated to a specific component should not contain effects that have to be associated with another component. Therefore, the following rules should be observed: * The variable assigned to the trend or to the seasonally adjusted series should not contain a seasonal pattern; * The variable assigned to the seasonal should not contain a trend (or level); * The variable assigned to the irregular should contain neither a seasonal pattern nor a trend (or level). - no external regressors can be assigned to calendar component. It has to be be done via user defined calendar regressors specific part (link)\nRamps and intervention variables are Specific cases of external regressors\n\n\nSetting in GUI\nUser-defined variables\nStep 1: import data set containing the regressors, general procedure explained here\nStep 2: Link the regressors to the workspace, procedure detailed here\nStep 3: Modify specifications via window\nModifications are done the same way in a global specification (whole SAP) or series by series.\n\n\n\nSetting in R\n(to be added)\n\n\nSpecial case 1: Ramp effects\nA ramp effect means a linear increase or decrease in the level of the series over a specified time interval \\(t_{0}\\) to \\(\\ t_{1}\\). All dates of the ramps must occur within the time series span. (tested: not true). Ramps can overlap other ramps, additive outliers and level shifts.\n\nCreation in GUI\n\n\n\nAllocation to components\nallocation when intervention or ramps ? in test allocated to trend ? (reg)\nimpossible (?) to create several intervention variables\n\n\n\nSpecial case 2: Intervention variables\nIntervention variables are modeled as any possible sequence of ones and zeros, on which some operators may be applied. They are built as combinations of the following basic structures: * Dummy variables[^17]; * Any possible sequence of ones and zeros; * \\(\\frac{1}{(1 - \\delta B)}\\), * \\((0 &lt; \\delta \\leq 1)\\); * \\(\\frac{1}{(1 - \\delta_{s}B^{s })}\\), * \\((0 &lt; \\delta_{s} \\leq 1)\\); * \\(\\frac{1}{(1 - B)(1 - B^{s})}\\); where \\(B\\) is backshift operator (i.e. \\(B^{k}X_{t} = X_{t - k}\\)) and \\(s\\) is frequency of the time series ($s = 12$for a monthly time series, $s = 4$for a quarterly time series).\nThese basic structures enable the generation of not only AO, LS, TC, SO and RP outliers but also sophisticated intervention variables that are well-adjusted to the particular case.\n\nCreation in GUI\nstep 1 \nStep 2:\n\nstep 3: \n\n\nCreation in R\n(to be added)\n\n\nAllocation to components\nallocation (to be added)\nfixed coefficient options\n\nFixed regression coefficients regression variables; –\nFor the pre-specified regression variables this option specifies the parameter estimates that will be held fixed at the values provided by the user. To fix a coefficient the user should undertake the following actions:\n\nChoose the transformation (log or none).\nDefine some regression variables in the Regressors specification.\nPush on the fixed regression coefficients editor button in the User-defined variables row.\nSelect the regression variable from the list for which the coefficient will be fixed.\nSave the new setting with the Done button.\n\n\nOverview: differences GUI set up vs R set up\n\n\n\nRetrieving Results\nFor all types of external regressors: user-defined, ramps or intervention variables.\n\nRegressors\nIn GUI\nTo retrieve regressors that were actually used, expand pre-processing NODE and click on Regressors pane.\n\nIn R\n(to be added )\n\n\nRegression details\nIn GUI\nRegression details are in the pre-processing pane.\n\nIN R\n\n\n\n\nArima Model\nKey specifications on Arima modelling are embedded in default specifications: airline (default model) or full automatic research.(links)\nTwo kinds of interventions are available to the user\n\nmodify automatic detection parameters\nset a user defined Arima model\n\nIn both cases forecast horizon can also be set (link)\n\nOptions for modifying automatic detection\nautomdl.enabled If TRUE, the automatic modelling of the ARIMA model is enabled. (If FALSE, the parameters of the ARIMA model can be specified, see below)\nControl variables for the automatic modelling of the ARIMA model (when automdl.enabled is set to TRUE):\nautomdl.acceptdefault a logical. If TRUE, the default model (ARIMA(0,1,1)(0,1,1)) may be chosen in the first step of the automatic model identification. If the Ljung-Box Q statistics for the residuals is acceptable, the default model is accepted and no further attempt will be made to identify another model.\nautomdl.cancel the cancellation limit (numeric). If the difference in moduli of an AR and an MA roots (when estimating ARIMA(1,0,1)(1,0,1) models in the second step of the automatic identification of the differencing orders) is smaller than the cancellation limit, the two roots are assumed equal and cancel out.\nautomdl.ub1 the first unit root limit (numeric). It is the threshold value for the initial unit root test in the automatic differencing procedure. When one of the roots in the estimation of the ARIMA(2,0,0)(1,0,0) plus mean model, performed in the first step of the automatic model identification procedure, is larger than the first unit root limit in modulus, it is set equal to unity.\nautomdl.ub2 the second unit root limit (numeric). When one of the roots in the estimation of the ARIMA(1,0,1)(1,0,1) plus mean model, which is performed in the second step of the automatic model identification procedure, is larger than second unit root limit in modulus, it is checked if there is a common factor in the corresponding AR and MA polynomials of the ARMA model that can be cancelled (see automdl.cancel). If there is no cancellation, the AR root is set equal to unity (i.e. the differencing order changes).\nautomdl.mixed a logical. This variable controls whether ARIMA models with non-seasonal AR and MA terms or seasonal AR and MA terms will be considered in the automatic model identification procedure. If FALSE, a model with AR and MA terms in both the seasonal and non-seasonal parts of the model can be acceptable, provided there are no AR or MA terms in either the seasonal or non-seasonal terms.\nautomdl.balanced a logical. If TRUE, the automatic model identification procedure will have a preference for balanced models (i.e. models for which the order of the combined AR and differencing operator is equal to the order of the combined MA operator).\nautomdl.armalimit the ARMA limit (numeric). It is the threshold value for t-statistics of ARMA coefficients and constant term used for the final test of model parsimony. If the highest order ARMA coefficient has a t-value smaller than this value in magnitude, the order of the model is reduced. If the constant term t-value is smaller than the ARMA limit in magnitude, it is removed from the set of regressors.\nautomdl.reducecv numeric, ReduceCV. The percentage by which the outlier’s critical value will be reduced when an identified model is found to have a Ljung-Box statistic with an unacceptable confidence coefficient. The parameter should be between 0 and 1, and will only be active when automatic outlier identification is enabled. The reduced critical value will be set to (1-ReduceCV)*CV, where CV is the original critical value.\nautomdl.ljungboxlimit the Ljung Box limit (numeric). Acceptance criterion for the confidence intervals of the Ljung-Box Q statistic. If the LjungBox Q statistics for the residuals of a final model is greater than the Ljung Box limit, then the model is rejected, the outlier critical value is reduced and model and outlier identification (if specified) is redone with a reduced value.\nautomdl.ubfinal numeric, final unit root limit. The threshold value for the final unit root test. If the magnitude of an AR root for the final model is smaller than the final unit root limit, then a unit root is assumed, the order of the AR polynomial is reduced by one and the appropriate order of the differencing (non-seasonal, seasonal) is increased. The parameter value should be greater than one.\n(for both options) fcst.horizon the forecasting horizon (numeric). The forecast length generated by the Reg-Arima model in periods (positive values) or years (negative values). By default, the program generates a two-year forecast (fcst.horizon set to -2). Defaults different in GUI and R.\nSetting in GUI \nForecast horizon when using tramo seats Is set in the decomposition part of the specification in GUI.\n\nForecast horizon when using X13-ARIMA \nSetting in R (first template, then worked example) X13-Arima template in version 2\n\nspec_2 &lt;- x13_spec(spec = spec_1,\nautomdl.enabled = NA,\n  automdl.acceptdefault = NA,\n  automdl.cancel = NA_integer_,\n  automdl.ub1 = NA_integer_,\n  automdl.ub2 = NA_integer_,\n  automdl.mixed = NA,\n  automdl.balanced = NA,\n  automdl.armalimit = NA_integer_,\n  automdl.reducecv = NA_integer_,\n  automdl.ljungboxlimit = NA_integer_,\n  automdl.ubfinal = NA_integer_)\n\nadd worked example in version 2\nin version 3\nadd worked example in version 3\n\n\nOptions for setting a user-defined Arima model\nControl variables for the non-automatic modelling of the ARIMA model (when automdl.enabled is set to FALSE):\narima.mu logical. If TRUE, the mean is considered as part of the ARIMA model.\narima.p numeric. The order of the non-seasonal autoregressive (AR) polynomial.\narima.d numeric. The regular differencing order.\narima.q numeric. The order of the non-seasonal moving average (MA) polynomial.\narima.bp numeric. The order of the seasonal autoregressive (AR) polynomial.\narima.bd numeric. The seasonal differencing order.\narima.bq numeric. The order of the seasonal moving average (MA) polynomial.\nControl variables for the user-defined ARMA coefficients. Coefficients can be defined for the regular and seasonal autoregressive (AR) polynomials and moving average (MA) polynomials. The model considers the coefficients only if the procedure for their estimation (arima.coefType) is provided, and the number of provided coefficients matches the sum of (regular and seasonal) AR and MA orders (p,q,bp,bq).\narima.coefEnabled logical. If TRUE, the program uses the user-defined ARMA coefficients.\narima.coef a vector providing the coefficients for the regular and seasonal AR and MA polynomials. The vector length must be equal to the sum of the regular and seasonal AR and MA orders. The coefficients shall be provided in the following order: regular AR (Phi; p elements), regular MA (Theta; q elements), seasonal AR (BPhi; bp elements) and seasonal MA (BTheta; bq elements). E.g.: arima.coef=c(0.6,0.7) with arima.p=1, arima.q=0,arima.bp=1 and arima.bq=0.\narima.coefType a vector defining the ARMA coefficients estimation procedure. Possible procedures are: “Undefined” = no use of any user-defined input (i.e. coefficients are estimated), “Fixed” = the coefficients are fixed at the value provided by the user, “Initial” = the value defined by the user is used as the initial condition. For orders for which the coefficients shall not be defined, the arima.coef can be set to NA or 0, or the arima.coefType can be set to “Undefined”. E.g.: arima.coef = c(-0.8,-0.6,NA), arima.coefType = c(“Fixed”,“Fixed”,“Undefined”).\nSetting in GUI \nFixing coefficients \nSetting in R\nX13-Arima template in version 2\n\nspec_2 &lt;- x13_spec(spec = spec_1, \nautomdl.enabled = FALSE,\n\n  arima.mu = NA,\n  arima.p = NA_integer_,\n  arima.d = NA_integer_,\n  arima.q = NA_integer_,\n  arima.bp = NA_integer_,\n  arima.bd = NA_integer_,\n  arima.bq = NA_integer_,\n  arima.coefEnabled = NA,\n  arima.coef = NA,\n  arima.coefType = NA,\n  fcst.horizon = NA_integer_)\n\nin version 3\n\n\n\nReg-Arima model Results and Diagnostics\nType of results (including Tramo addenda)\n\nall regressors used (shown above)\nregression details: explanatory variables (above)\nArima model specific results\nadditional diagnostics on residuals\nlikelihood\nseasonality tests on residuals\n\n\nDisplay in GUI\nReg-Arima model detail with other regression results in pre-processing pane. with number of observations.. parameters \nMore details in Pre-processing/Arima Node\n\nIn residual Node\n\n\n\n\n\n\n Seasonality tests on residuals in the Diagnostics NODE\n(link to test chapter for tests details)\n\n\n\nRetrieve in R\n(to be added)"
  },
  {
    "objectID": "A-sa.html#x-11-decomposition",
    "href": "A-sa.html#x-11-decomposition",
    "title": "Seasonal Adjustment",
    "section": "X-11 Decomposition",
    "text": "X-11 Decomposition\nThis part explains how to use X-11 decomposition algorithm, via R as well as via GUI. The algorithm itself is explained in more details here\nIn a nutshell, X-11 will de decompose the linearized series using iteratively different moving averages. The effects of pre-treatment will be reallocated at the end.\nThe sections below (will) describe\n\nspecifications needed to run X-11\ngenerated output\nseries\ndiagnostics\nfinal parameters\nuser-defined parameters\n\n\nDefault specifications\nThe default specifications for X-11 must be chosen at the starting of the SA processing. They are detailed in the Reg-Arima part. X-11 can be run without pre-treatment\n\n\nQuick Launch\n\nFrom GUI\nWith a workspace open, an SAProcessing created and open data provider:\n\nchoose a default specification\ndrop your data and press green arrow\n\n\n\nIn R\nIn version 2\n\nlibrary(\"RJDemetra\")\nmodel_sa &lt;- x13(raw_series, spec =\"RSA5c\")\n\nThe model_sa R object (list of lists) contains all parameters and results. It will be progressively detailed below.\n\n\n\nRetrieve series\n\nDisplay in GUI\nMain results \n(forecasts glued, values in italic)\nX-11 Tables\n\n\n\nText\n\n\nOutput series can be exported out of GUI by two means:\n\ngenerating output files\nrunning the cruncher to generate those files as described here\n\n\n\nRetrieve in R\nIn version 2\n\n# final components\nmodel_sa$final$series\n# final forecasts y_f sa_f s_f t_f i_f\nmodel_sa$final$forecasts\n# from user defined output \n\n\n\n\nRetrieve Diagnostics\nX11 produces the following type diagnostics or quality measures\n\nSI-ratios\n\nDisplay in GUI\nNODE Main Results &gt; SI-Ratios SA_MainResults_SI_ratios.png\n\n\n\nText\n\n\nIn GUI all values cannot be retrieved\n\n\nRetrieve in R\nIn version 2\n\n# data frame with values \nmodel_sa$decomposition$si_ratio\n# customizable plot\nplot(model_sa, type= \"cal-seas-irr\",first_date = c(2015, 1))\n\n\n\n\nM-statistics\nAt the end of the decomposition, X-11 algorithm provides quality measure of the decomposition called “M statistics”: 11 statistics (M1 to M11) and 2 summary indicators (Q et Q-M2). By design \\(0&lt;M_x&lt;3\\) and acceptance region is \\(M_x \\leq 1\\)\n\nM1 The relative contribution of the irregular over three months span\nM2 The relative contribution of the irregular component to the stationary portion of the variance\nM3 The amount of month to month change in the irregular component as compared to the amount of month to month change in the trend-cycle (I/C-ratio)\nM5 MCD (Months for Cyclical Dominance): The number of months it takes the change in the trend-cycle to surpass the amount of change in the irregular\nM6 The amount of year to year change in the irregular as compared to the amount of year to year change in the seasonal (only valid for 3x5 seasonal filter)\nM7 The amount of moving seasonality present relative to the amount of stable seasonality\nM8 The size of the fluctuations in the seasonal component throughout the whole series\nM9 The average linear movement in the seasonal component throughout the whole series\nM10 Same as 8, calculated for recent years only (4 years, N-2 to N-5)\nM11 Same as 9, calculated for recent years only\n\nThe \\(Q\\) statistic is a composite indicator calculated from the \\(M\\) statistics.\n\\[Q = \\frac{10M1 + 11M2 + 10M3 + 8M4 + 11M5 + 10M6 + 18M7 + 7M8 + 7M9 + 4M10 + 4M11}{100}\\]\n\\(Q = Q - M2\\) (also called \\(Q2\\)) is the \\(Q\\) statistic for which the \\(M2\\) statistics was excluded from the formula, i.e.:\n\\[Q - M2 = \\frac{10M1 + 10M3 + 8M4 + 11M5 + 10M6 + 18M7 + 7M8 + 7M9 + 4M10 + 4M11}{89}\\]\nIf a time series does not cover at least 6 years, the \\(M8\\), \\(M9\\), \\(M10\\) and \\(M11\\) statistics cannot be calculated. In this case the \\(Q\\) statistic is computed as:\n\\[Q = \\frac{14M1 + 15M2 + 10M3 + 8M4 + 11M5 + 10M6 + 32M7}{100}\\]\nThe model has a satisfactory quality if the \\(Q\\) statistic is lower than 1.\n\nDisplay in GUI\nTo display results in GUI, expand NODE\nDecomposition(X-11) &gt; Quality Measures &gt; Summary\nResults displayed in red indicate that the test failed.\n\n\n\nText\n\n\n\n\nRetrieve in R\nIn version 2\n\n# this code snippet is not self-sufficient \nmodel_sa$decomposition$mstats\n\n\n\n\nDetailed Quality measures\nIn GUI all the diagnostics below can be displayed expanding the NODE\nDecomposition(X-11) &gt; Quality Measures &gt; Details\nThey are detailed in the X-11 method chapter\nIn R (to be added)\n\n\n\nRetrieve final parameters\nThis section describes the parameters which are automatically chosen by the software as a result of the estimation process. They have no default value.\nFinal trend filter: length of Henderson filter applied for final estimation (in the second part of the D step).\nFinal seasonal filer: length of Henderson filter applied for final estimation (in the second part of the D step).\n\nDisplay in GUI\nNode Decomposition(X11) &gt; Final Filters\n\n\nRetrieve in R\nIn version 2\n\nmodel_sa$decomposition$s_filter\nmodel_sa$decomposition$t_filter\n\n\n\n\nUser-defined parameters\nThe following sections describe how to change default values or automatic choices.\n\nGeneral settings\n\nMode\nSeasonal component\nForecasts horizon\n\nLength of the forecasts generated by the Reg-Arima model - in months (positive values) - years (negative values) - if set to is set to 0, the X-11 procedure does not use any model-based forecasts but the original X-11 type forecasts for one year. - default value: -1, thus one year from the Arima model\n\nBackcasts horizon\n\nLength of the backcasts generated by the Reg-Arima model - in months (positive values) - years (negative values) - default value: 0\n\n\nIrregular correction\n\nLSigma\n\nsets lower sigma (standard deviation) limit used to down-weight the extreme irregular values in the internal seasonal adjustment iterations\nvalues in \\([0,Usigma]\\)\ndefault value is 1.5\n\nUSigma\n\nsets upper sigma (standard deviation)\nvalues in \\([Lsigma,+\\infty]\\)\ndefault value is 2.5\n\nCalendarsigma\n\nallows to set different LSigma and USigma for each period\nvalues\n\nNone (default)\nAll: standard errors used for the extreme values detection and adjustment computed separately for each calendar month/quarter\nSignif: groups determined by Cochran test (check)\nSigmavec: set two customized groups of periods\n\n\nExcludeforecasts\n\nticked: forecasts and backcasts from the Reg-Arima model not used in Irregular Correction\nunticked (default): forecasts and backcasts used\n\n\n\n\nSeasonality extraction filters choice\nSpecifies which be used to estimate the seasonal factors for the entire series.\n\nSeasonal filter\ndefault value: MSR (Moving seasonality ratio), automatic choice of final seasonal filter, initial filters are \\(3\\times 3\\)\nchoices: \\(3\\times 1\\), \\(3\\times 3\\), \\(3\\times 5\\), \\(3\\times 9\\), \\(3\\times 15\\) or Stable\n“Stable”: constant factor for each calendar period (simple moving average of a all \\(S+I\\) values for each period)\n\nUser choices will be applied to final phase D step.\nThe seasonal filters can be selected for the entire series, or for a particular month or quarter.\n\nDetails on seasonal filters\n\nSets different seasonal filters by period in order to account for seasonal heteroskedasticity (link to M chapter)\n\ndefault value: empty\n\n\n\nTrend estimation filters\n\nAutomatic Henderson filter our user-defined\n\ndefault: length 13\nunticked: user defined length choice\n\nHenderson filter length choice\n\nvalues: odd number in \\([3,101]\\)\ndefault value: 13\n\n\nCheck: will user choice be applied to all steps or only to final phase D step\n\n\nParameter setting in GUI\nAll the parameters above can be set with in the specification box.\n\n\nParameter setting in R packages\nIn version 2\n\n#Creating a modified specification, customizing all available X11 parameters\nmodified_spec&lt;- x13_spec(current_sa_model,\n    #x11.mode=\"?\",\n    #x11.seasonalComp = \"?\",\n    x11.fcasts = -2,\n    x11.bcasts = -1,\n    x11.lsigma = 1.2,\n    x11.usigma = 2.8,\n    x11.calendarSigma = NA, \n      x11.sigmaVector = NA,\n    x11.excludeFcasts = NA\n    # filters \n    x11.trendAuto = NA, \n    x11.trendma = 23,\n    x11.seasonalma = \"S3X9)\n\n#New SA estimation: apply modified_spec\n\nmodified_sa_model&lt;-x13(raw_series,modified_spec)"
  },
  {
    "objectID": "A-sa.html#seats-decomposition",
    "href": "A-sa.html#seats-decomposition",
    "title": "Seasonal Adjustment",
    "section": "SEATS Decomposition",
    "text": "SEATS Decomposition\nSEATS algorithm will decompose the linearized series, in level or in logarithm, using the Arima model fitted by Tramo in the pre-treatment phase.\nThe sections below will describe\n\nspecifications needed to run SEATS\ngenerated output\nseries\ndiagnostics\nfinal parameters\nuser-defined parameters\n\n\nDefault specifications\nThe default specifications for SEATS must be chosen at the starting of the SA processing. They are detailed in the RegArima part Starting point for Tramo-Seats\n\n\nQuick Launch\n\nFrom GUI\nWith a workspace open, an SAProcessing created and open data provider:\n\nchoose a default specification (link)\ndrop your data and press green arrow (link)\n\n\n\nIn R\nIn version 2\n\nlibrary(\"RJDemetra\")\nmodel_sa &lt;- tramoseats(raw_series, spec =\"RSAfull\")\n\nIn version 3\n\nlibrary(\"rjd3tramoseats\")\nmodel_sa &lt;- tramoseats(raw_series, spec =\"RSAfull\")\n\nThe model_sa R object (list of lists) contains all parameters and results. It will be progressively detailed below.\nMore details on the functions are to be found in R help pages.\n\n\n\nRetrieve Series\nThis section outlines how to retrieve the different kinds of output series from GUI or in R.\n\nfinal components (including reallocation of pre-adjustment effects)\ncomponents in level\ncomponents in level or log\n\n\nStochastic series\nDecomposition of the linearized series or of its logarithm (in case of a multiplicative model)\ny_lin is split into components: t_lin, s_lin, i_lin\nsuffixes: - _f stands for forecast - _e stands for - _ef stands for\n\nDisplay in GUI\nNODE Decomposition&gt;Stochastic series - Table with series and its standard error image\n\nPlot of Trend with confidence interval image\nPlot of Seasonal component with confidence interval image\n\n\n\nRetrieve from GUI\nGenerating output from GUI (link) or from Cruncher (link), stochastic series, their standard errors, forecasts and forecasts errors can be accessed with the following names\n\n\n\nSeries Name\nMeaning\n\n\n\n\ndecomposition.y_lin\n\n\n\ndecomposition.y_lin_f\n\n\n\ndecomposition.y_lin_ef\n\n\n\ndecomposition.t_lin\n\n\n\ndecomposition.t_lin_f\n\n\n\ndecomposition.t_lin_e\n\n\n\ndecomposition.t_lin_f\n\n\n\ndecomposition.sa_lin\n\n\n\ndecomposition.sa_lin_f\n\n\n\ndecomposition.sa_lin_e\n\n\n\ndecomposition.sa_lin_ef\n\n\n\ndecomposition.s_lin\n\n\n\ndecomposition.s_lin_f\n\n\n\ndecomposition.s_lin_e\n\n\n\ndecomposition.s_lin_ef\n\n\n\ndecomposition.i_lin\n\n\n\ndecomposition.i_lin_f\n\n\n\ndecomposition.i_lin_e\n\n\n\ndecomposition.i_lin_ef\n\n\n\n\n\n\nRetrieve in R\nIn version 2\n\nlibrary(\"RJDemetra\")\n# list of additional output objects\nuser_defined_variables(\"TRAMO-SEATS\")\n# specify additional objects in estimation \nm &lt;- tramoseats(y,\"RSAfull\", userdefined=c( \"decomposition.y_lin\", \"ycal\",\"variancedecomposition.seasonality\"))\n# retrieve objects \nm$user_defined$decomposition.y_lin\nm$user_defined$ycal\nm$user_defined$variancedecomposition.seasonality\n\nIn version 3\n\nlibrary(\"rjd3tramoseats\")\n# list of additional output objects\nuserdefined_variables_tramoseats(\"tramoseats\")\n# specify additional objects in estimation \nm &lt;- tramoseats(y,\"RSAfull\", userdefined=c(\"decomposition.y_lin\",\"ycal\",\"variancedecomposition.seasonality\"))\n# retrieve objects \nm$user_defined$decomposition.y_lin\nm$user_defined$ycal\nm$user_defined$variancedecomposition.seasonality\n\n\n\n\nComponents (Level)\nDecomposition of the linearized series, back to level in case of a multiplicative model.\ny_lin is split into components: t_lin, s_lin, i_lin\nsuffixes: - _f stands for forecast - _e stands for - _ef stands for\n\nDisplayed in GUI\nNODE Decomposition&gt;Components - Table with series and its standard error image\n\n\nRetrieve from GUI\nGenerating output from GUI (link) or from Cruncher (link), component series, their standard errors, forecasts and forecasts errors can be accessed with the following names\n\n\n\nSeries Name\nMeaning\n\n\n\n\ndecomposition.y_cmp\n\n\n\ndecomposition.y_cmp_f\n\n\n\ndecomposition.y_cmp_ef\n\n\n\ndecomposition.t_cmp\n\n\n\ndecomposition.t_cmp_f\n\n\n\ndecomposition.t_cmp_e\n\n\n\ndecomposition.t_cmp_f\n\n\n\ndecomposition.sa_cmp\n\n\n\ndecomposition.sa_cmp_f\n\n\n\ndecomposition.sa_cmp_e\n\n\n\ndecomposition.sa_cmp_ef\n\n\n\ndecomposition.s_cmp\n\n\n\ndecomposition.s_cmp_f\n\n\n\ndecomposition.s_cmp_e\n\n\n\ndecomposition.s_cmp_ef\n\n\n\ndecomposition.i_cmp\n\n\n\ndecomposition.i_cmp_f\n\n\n\ndecomposition.i_cmp_e\n\n\n\ndecomposition.i_cmp_ef\n\n\n\n\n\n\nRetrieve in R\nSame procedure as for stochastic series.\n\n\nBias correction to be added\n\n\n\nFinal series\n\n\n\n\n\n\n\n\n\nSeries\nFinal SEATS components\nFinal Results\nReallocation of pre-adjustment effects\n\n\n\n\nRaw series (forecasts)\n\ny (y_f)\n\n\n\nLinearized series\nB1\n\nnone\n\n\nFinal seasonal component\nD16\ns (s_f)\n\n\n\nFinal trend\nD12\nt (t_f)\n\n\n\nFinal irregular\nD13\ni (i_f)\n\n\n\nCalendar component\n\n\n\n\n\nSeasonal without calendar\nD10\n\n\n\n\n\n(to be added: reallocation of outliers effects)\n\nDisplay in GUI\nFinal results are displayed for each series in the NODE MAIN&gt;Table\n\n\n\nText\n\n\nForecasts are glued at the end it italic\n\n\nRetrieve from GUI\nGenerating output from GUI (link) or from Cruncher (link), component series, their standard errors, forecasts and forecasts errors can be accessed with the following names\n\n\n\nSeries Name\nMeaning\n\n\n\n\ny\n\n\n\ny_f\n\n\n\nt\n\n\n\nt_f\n\n\n\nsa\n\n\n\nsa_f\n\n\n\ns\n\n\n\ns_f\n\n\n\ni\n\n\n\ni_f\n\n\n\n\n\n\nRetrieve in R\nIn version 2\n\nlibrary(\"RJDemetra\")\nsa_model &lt;- RJDemetra::tramoseats(y,\"RSAfull\")\nsa_model$final$series\nsa_model$final$forecasts\n# for additional results call user-defined output as explained above \n\nIn version 3\n\nlibrary(\"rjd3tramoseats\")\nsa_model &lt;- tramoseats(y,spec=\"RSAfull\")\n# final series can be accessed here\nsa$result$final$sa\n# for additional results call user-defined output as explained above \n\n\n\n\n\nRetrieve Diagnostics\n\nWK analysis\n\ncomponents final estimators\n\nError analysis autocorrelation of the errors (sa, trend) revisions of the errors\nGrowth rates\nModel based tests\nSignificant seasonality\nStationary variance decomposition\n\n\n\nRetrieve Final Parameters\nRelevant if parameters not set manually, or any parameters automatically selected by the software without having a fixed default value. (The rest of the parameters is set in the specification) To manually set those parameters and see all the fixed default values see Specifications / parameters section\n\nArima Models for components\n\nDisplay in GUI\nClick on the Decomposition NODE\n\n\n\nRetrieve from GUI\n(add names for output and cruncher)\n\n\nDisplay in R\n(display or retrieve)\nversion 2\nversion 3\n\n\n\nOther final parameters\nFinal parameters which can be fine-tuned be the user are described in User-defined specifications section below\n\n\n\nSetting user-defined parameters\nThe section below explains how the user can fine-tune some seats parameters, which are put in context in the corresponding method chapter.the default value is indicated in ().\n\nPrediction length\n\nForecast span used in the decomposition default: one year (-1) (years are set in negative values, positive values indicate number of periods)\n\nApproximation Mode\n\nModification type for inadmissible models None (default) Legacy Noisy\n\nMA unit root boundary\n\nModulus threshold for resetteing MA “near-unit” roots [0,1] default (0.95)\n\nTrend Boundary Modulus threshold for assigning positive real AR Roots [0,1] default (0.5)\nSeasonal Tolerance Degree threshold for assigning complex AR roots [0,10] default (2)\nSeasonal Boundary (unique) Modulus threshold for assigning negative real AR roots [0,1] default (0.8)\nSeasonal Boundary (unique) Same modulus threshold unique seasonal AR roots [0,1] default (0.8)\nMethod\n\nAlgorithm used for estimation of unobserved components\nBurman (default)\nKalmanSmoother\nMcEllroyMatrix\n\nSeting parameters in GUI\nIn specification window corresponding to a given series:\n\n\n\nText\n\n\n\n\nSet in R\nversion 2 (RJDemetra)\n\ntramoseats_spec(\n spec = c(\"RSAfull\", \"RSA0\", \"RSA1\", \"RSA2\", \"RSA3\", \"RSA4\", \"RSA5\"),\n  fcst.horizon = NA_integer_,\n  seats.predictionLength = NA_integer_,\n  seats.approx = c(NA, \"None\", \"Legacy\", \"Noisy\"),\n  seats.trendBoundary = NA_integer_,\n  seats.seasdBoundary = NA_integer_,\n  seats.seasdBoundary1 = NA_integer_,\n  seats.seasTol = NA_integer_,\n  seats.maBoundary = NA_integer_,\n  seats.method = c(NA, \"Burman\", \"KalmanSmoother\", \"McElroyMatrix\")\n)\n\nin version 3 with {rjd3tramoseats} (to be added)"
  },
  {
    "objectID": "A-sa.html#stl",
    "href": "A-sa.html#stl",
    "title": "Seasonal Adjustment",
    "section": "STL",
    "text": "STL\nLoess based decomposition algorithm used on linearized data data, no pre-adjustment.\nNot currently available. Under construction."
  },
  {
    "objectID": "A-sa.html#basic-structural-models",
    "href": "A-sa.html#basic-structural-models",
    "title": "Seasonal Adjustment",
    "section": "Basic Structural Models",
    "text": "Basic Structural Models\nNot currently available. Under construction."
  },
  {
    "objectID": "A-sa-hf.html#overview",
    "href": "A-sa-hf.html#overview",
    "title": "Seasonal adjustment of high-frequency data",
    "section": "Overview",
    "text": "Overview\nThis chapter provides guidance on seasonal adjustment of infra-monthly, or high-frequency (HF), time-series data with JDemetra+ tailored algorithms.\nCurrently available topics:\n\ndescription of HF data specificities\nR functions for pre-treatment, extended X-11 and extended Seats\n\nTopics under construction\n\ngraphical user interface 3.0 functionalities for HF data\nSTL functions\nState space framework"
  },
  {
    "objectID": "A-sa-hf.html#data-specificities",
    "href": "A-sa-hf.html#data-specificities",
    "title": "Seasonal adjustment of high-frequency data",
    "section": "Data specificities",
    "text": "Data specificities\nHF data often display multiple seasonal patterns with potentially non-integer periodicities which cannot be modeled with classical SA algorithms. JD+ provides tailored versions of these algorithms.\n\nPeriodicities (number of observations per cycle)\n\n\nData\nDay\nWeek\nMonth\nQuarter\nYear\n\n\n\n\nquarterly\n\n\n\n\n4\n\n\nmonthly\n\n\n\n3\n12\n\n\nweekly\n\n\n4.3481\n13.0443\n52.1775\n\n\ndaily\n\n7\n30.4368\n91.3106\n365.2425\n\n\nhourly\n24\n168\n730.485\n2191.4550\n8765.82"
  },
  {
    "objectID": "A-sa-hf.html#tailored-algorithms-in-jdemetra",
    "href": "A-sa-hf.html#tailored-algorithms-in-jdemetra",
    "title": "Seasonal adjustment of high-frequency data",
    "section": "Tailored algorithms in JDemetra+",
    "text": "Tailored algorithms in JDemetra+\n\n\n\n\n\n\n\n\n\nCol1\nAlgorithm\nGUI v 3.0\nR package\n\n\n\n\nPre-treatment\nExtended Airline Model\nyes\nrjd3highfreq\n\n\nDecomposition\nExtended SEATS Extended Airline Model\nyes\nrjd3highfreq\n\n\n\nExtended X-11\nyes\nrjd3x11plus\n\n\n\nExtended STL\nno\nrjd3stl\n\n\nOne-Step\nSSF Framework\nno\nrjd3sts"
  },
  {
    "objectID": "A-sa-hf.html#unobserved-components",
    "href": "A-sa-hf.html#unobserved-components",
    "title": "Seasonal adjustment of high-frequency data",
    "section": "Unobserved Components",
    "text": "Unobserved Components\n\nRaw series decomposition\n\n\n\nMultiple seasonal patterns\nHF data often contain multiple seasonal patterns. For example, daily economic time series often display strong infra-weekly and infra-yearly seasonality. An infra-monthly seasonal pattern may also be present, but its strength is usually less pronounced in practice. In theory, the full decomposition of the seasonal component in daily data is given by: \\[S_{t}= S_{t,7} \\circ S_{t,30.44} \\circ S_{t,365.25}\\]\nThe decomposition is done iteratively periodicity by periodicity starting with the smallest one (highest frequency) as:\n\nhighest frequencies usually display the biggest and most stable variations\ncycles of highest frequencies can mix up with lower ones"
  },
  {
    "objectID": "A-sa-hf.html#identifying-seasonal-patterns",
    "href": "A-sa-hf.html#identifying-seasonal-patterns",
    "title": "Seasonal adjustment of high-frequency data",
    "section": "Identifying seasonal patterns",
    "text": "Identifying seasonal patterns\nJDemetra+ provides the Canova-Hansen test in the rjd3toolkit package."
  },
  {
    "objectID": "A-sa-hf.html#pre-adjustment",
    "href": "A-sa-hf.html#pre-adjustment",
    "title": "Seasonal adjustment of high-frequency data",
    "section": "Pre-adjustment",
    "text": "Pre-adjustment\nIn classical X13-Arima and Tramo-Seats, a pre-adjustment step is performed to remove deterministic effects, such as outliers and calendar effects, with a Reg-Arima model. In the extended version for HF data, it is also the case with an extended Airline model.\nA general Reg-ARIMA model is written as follows: \\[\n\\left(Y_t - \\sum {\\alpha_i}X_{it}\\right) \\sim ARIMA(p,d,q)(P,D,Q)\n\\] These models contain seasonal backshift operators \\(B^{s}(y_t)=y_{t-s}\\). Here \\(s\\) can be non-integer. JDemetra+ will rely on a modified version of a frequently used Arima model: the “Airline” model:\n\\[\n(1-B)(1-B^{s})y_t=(1-\\theta_1 B)(1-\\theta_2 B^{s}) \\epsilon_t \\text{~~~~} \\epsilon_t \\sim \\text{NID}(0,\\sigma^2_{\\epsilon})  \n\\]\nFor HF data, the potentially non-integer periodicity \\(s\\) will be written: \\(s=s' + \\alpha\\), with \\(\\alpha \\in [0,1)\\) (for example \\(52.18 = 52 +0.18\\) is the yearly periodicity for weekly data)\nTaylor series development around \\(1\\) of \\(f(x)=x^\\alpha\\) \\[\n\\begin{array}{lll}\nx^\\alpha &=& 1 + \\alpha (x-1) + \\frac{\\alpha (\\alpha+1)}{2!} (x-1)^2 + \\frac{\\alpha (\\alpha+1) (\\alpha+2)}{3!} (x-1)^3 +\\cdots \\\\\n            B^\\alpha &\\cong& (1 - \\alpha)+ \\alpha B     \n\\end{array}\n\\] Approximation of \\(B^{s+\\alpha}\\) in an extended Airline model\n\\[\n\\begin{array}{lll}\nB^{s+\\alpha} &\\cong& (1 - \\alpha)B^s+ \\alpha B^{s+1}                \n\\end{array}\n\\] Example for a daily series displaying infra-weekly (\\(p_{1}=7\\)) and infra-yearly (\\(p_{2}=365.25\\)) seasonality:\n\\[\n(1-B)(1-B^{7})(1-B^{365.25)}(Y_t - \\sum {\\alpha_i}X_{it})=(1-\\theta_1 B)(1-\\theta_2 B^{7})(1-\\theta_3 B^{365.25}) \\epsilon_t\n\\] \\[\n\\epsilon_t \\overset{iid}{\\sim} \\text{N}(0,\\sigma^2_{\\epsilon})\n\\]\nwith \\[\n1 - B^{365.25} = 1 - (0.75B^{365} + 0.25B^{366})\n\\]\n\nCalendar correction\nCalendar regressors can be defined with the rjd3toolkit package and added to pre-treatment function as a matrix.\n\n# Create a calendar with rjd3toolkit\n# Define a national calendar\nfrenchCalendar &lt;- national_calendar(days = list(\n  fixed_day(7, 14), # Bastille Day\n  fixed_day(5, 8, validity = list(start = \"1982-05-08\")), # Victory Day\n  special_day('NEWYEAR'), \n  special_day('CHRISTMAS'),\n  special_day('MAYDAY'), \n  special_day('EASTERMONDAY'), \n  special_day('ASCENSION'),\n  special_day('WHITMONDAY'),\n  special_day('ASSUMPTION'),\n  special_day('ALLSAINTSDAY'), \n  special_day('ARMISTICE')) \n)\n# Generrate calendar regressors \nq&lt;-holidays(frenchCalendar, \"1968-01-01\", length = length(df_daily$births), type=\"All\",\n            nonworking = as.integer(7))\n\n# Argument type = All : taking all holidays into account\n# Argument type = Skip : taking into account only the holidays falling on a week day\n\n\n\nOutliers and intervention variables\nOutliers detection is available in the pre-treatment function. Detected outliers are AO, LS and WO. Critical value can be computed by the algorithm or user-defined.\n\n\nLinearization\nExample using rjd3highfreq::fractionalAirlineEstimation function:\n\npre_adjustment&lt;- rjd3highfreq::fractionalAirlineEstimation(y_raw,\n                x = q, # q = daily calendar regressors\n                periods = c(7, 365.25),\n                ndiff = 2, ar = FALSE, mean = FALSE,\n                outliers = c(\"ao\",\"ls\", \"wo\"), \n                criticalValue = 0, # computed in the algorithm\n                precision = 1e-9, approximateHessian = TRUE)\n\n“pre_adjustment” R object is a list of lists in which the user can retrieve input series, parameters and output series. For more details see chapter on R packages and rjd3highfreq help pages R, where all parameters are listed."
  },
  {
    "objectID": "A-sa-hf.html#decomposition",
    "href": "A-sa-hf.html#decomposition",
    "title": "Seasonal adjustment of high-frequency data",
    "section": "Decomposition",
    "text": "Decomposition\n\nExtended X-11\nX-11 is the decomposition module of X-13-Arima, the linearized series from the pre-adjustment step is split into seasonal (\\(S\\)), trend (\\(T\\)) and irregular (\\(I\\)) components. In case of multiple periodicities the decomposition is done periodicity by periodicity starting with the smallest one. Global structure of the iterations is the same as in “classical” X-11 but modifications were introduced for tackling non-integer periodicities. They rely on the Taylor approximation for the seasonal backshift operator:\n\\[\n\\begin{array}{lll}\nB^{s+\\alpha} &\\cong& (1 - \\alpha)B^s+ \\alpha B^{s+1}                \n\\end{array}\n\\]\n\nModification of the first trend filter for removing seasonality\nThe first trend estimation is thanks to a generalization of the centred and symmetrical moving averages with an order equal to the periodicity \\(p\\).\n\nfilter length \\(l\\): smallest odd integer greater than \\(p\\)\nexamples: \\(p=7 \\rightarrow l=7\\), \\(p=12 \\rightarrow l=13\\), \\(p=365.25 \\rightarrow l=367\\), \\(p=52.18 \\rightarrow l=53\\)\ncentral coefficients \\(1/p\\) (1/12,1/7, 1/365.25)\nend-point coefficients \\(\\mathbb{I} \\{\\text{$E(p)$ even}\\} +(p-E(p)) /2p\\)\nexample for \\(p=12\\): (\\(1/12\\) and \\(1/24\\)) (we fall back on \\(M_{2\\times12}\\) of the monthly case\nexample for \\(p=365.25\\): (\\(1/365.25\\) and \\(0.25/(2*365.25)\\))\n\n\n\nModification of seasonality extraction filters\nComputation is done on a given period\nExample \\(M_{3\\times3}\\)\n\\[\nM_{3\\times3}X = \\frac{1}{9}(X_{t-2p})+\\frac{2}{9}(X_{t-p})+\\frac{3}{9}(X_{t})+\\frac{2}{9}(X_{t+p})+\\frac{1}{9}(X_{t+2p})\n\\]\nif \\(p\\) integer: no changes needed\nif \\(p\\) non-integer: Taylor approximation of the backshift operator\n\n\nModification of final trend estimation filter\nAs seasonality has been removed in the first step, there is no non-integer periodicity issue in the final trend estimation, but extended X-11 offers additional features vs classic X-11, in which final trend is estimated with Henderson filters and Musgrave asymmetrical surrogates. In extended X-11, a generalization of this method with local polynomial approximation is available.\n\n\nExample of decomposition\nHere the raw series is daily and displays two periodicities \\(p=7\\) and \\(p=365.25\\)\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n# extraction of day-of-the-week pattern (dow)\nx11.dow &lt;- rjd3x11plus::x11plus(y_linearized,\n=======\n# extraction of day-of-the-week (DOW) pattern\nx11.dow &lt;- rjd3highfreq::x11(y_linearized,\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; 86a324e971dea668791bcfb00a39798e7f9ac253\n        period = 7,                 # DOW pattern\n        mul = TRUE,                              \n        trend.horizon = 9,  # 1/2 Filter length : not too long vs p\n        trend.degree = 3,                         # Polynomial degree\n        trend.kernel = \"Henderson\",               # Kernel function\n        trend.asymmetric = \"CutAndNormalize\",     # Truncation method\n        seas.s0 = \"S3X9\", seas.s1 = \"S3X9\",       # Seasonal filters\n        extreme.lsig = 1.5, extreme.usig = 2.5)   # Sigma-limits\n\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n# extraction of day-of-the-week pattern (doy)\n\nx11.doy &lt;- rjd3x11plus::x11plus(x11.dow$decomposition$sa,  # previous sa\n=======\n# extraction of day-of-the-year (DOY) pattern\nx11.doy &lt;- rjd3highfreq::x11(x11.dow$decomposition$sa,  # previous sa\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; 86a324e971dea668791bcfb00a39798e7f9ac253\n                    period = 365.2425,         # DOY pattern\n                    mul = TRUE, \n                    trend.horizon = 371, # 1/2 final filter length \n                    trend.degree = 3,\n                    trend.kernel = \"Henderson\", \n                    trend.asymmetric = \"CutAndNormalize\",\n                    seas.s0 = \"S3X15\", seas.s1 = \"S3X5\",\n                    extreme.lsig = 1.5, extreme.usig = 2.5)\n\n\n\n\nArima Model Based (AMB) Decomposition (Extended Seats)\nExample\n\n# extracting DOY pattern\namb.doy &lt;- rjd3highfreq::fractionalAirlineDecomposition(\n  amb.dow$decomposition$sa,  # DOW-adjusted linearised data\n  period = 365.2425,         # DOY pattern\n  sn = FALSE,                # Signal (SA)-noise decomposition \n  stde = FALSE,              # Calculate standard deviations\n  nbcasts = 0, nfcasts = 0)  # Numbers of back- and forecasts\n\n\n\nSummary of the process\nFor the time being, seasonal adjustment processing in rjd3highfreq cannot be encompassed by one function like for lower frequency, e.g rjd3x13::x13(y_raw)\nThe user has to run the steps one by one, here is an example with \\(p=7\\) and \\(p=365.25\\)\n\ncomputation of the linearized series \\(Y_{lin}=ExtendedAirline(Y)\\)\ncomputation of the calendar corrected series \\(Y_{cal}\\)\ncomputation of \\(S_{7}\\) by decomposition of the linearized series\ncomputation of \\(S_{365.25}\\) by decomposition of the seasonally adjusted series with \\(p=7\\)\nfinally adjusted series \\(sa_{final} = Y_{cal}/S_{7}/S_{365.25}\\) (if multiplicative model)\n\n\n\nSTL decomposition\nNot currently available. Under construction."
  },
  {
    "objectID": "A-sa-hf.html#state-space-framework",
    "href": "A-sa-hf.html#state-space-framework",
    "title": "Seasonal adjustment of high-frequency data",
    "section": "State Space framework",
    "text": "State Space framework\nNot currently available. Under construction."
  },
  {
    "objectID": "A-sa-hf.html#quality-assessment",
    "href": "A-sa-hf.html#quality-assessment",
    "title": "Seasonal adjustment of high-frequency data",
    "section": "Quality assessment",
    "text": "Quality assessment\n\nResidual seasonality\nJDemetra+ provides the Canova-Hansen test in rjd3toolkit package which allows to check for any remaining seasonal periodicity in the final SA data."
  },
  {
    "objectID": "A-outlier-detection.html#chapters-overview",
    "href": "A-outlier-detection.html#chapters-overview",
    "title": "Outlier detection and external regressors",
    "section": "Chapter’s overview",
    "text": "Chapter’s overview\nThe chapter describes\n\nhow to generate useful external regressors for improving seasonal adjustment or reg-arima modelling\nJDemetra+ solutions for outlier detection and in a time series.\nThese routines can be used stand alone or as part of a seasonal adjustment process. They can be accessed via GUI or R packages.\n\nHow to use the generated regressors, or any user-defined variable, in a seasonal adjustment or reg-arima modelling process is discussed in the relevant chapters on SA and SA of High-frequency data. There you will also find out how to fix the corresponding coefficients and how to allocate the effects to the selected component.\nThe external regressors described below are not meant for calendar correction which is detailed here\n(ADD TABLE by data type)\n\nExternal regressors using R packages vs GUI: quick contrasting\n\n\nOulier detection using R packages vs GUI: quick contrasting"
  },
  {
    "objectID": "A-outlier-detection.html#generating-external-regressors",
    "href": "A-outlier-detection.html#generating-external-regressors",
    "title": "Outlier detection and external regressors",
    "section": "Generating external regressors",
    "text": "Generating external regressors\n\nOutliers\n\nOutlier Types\nThe following outliers are available for automatic detection\n\n\nADD: - specifics for HF data (wo outiler)\n\n\nPre-specifying outliers\nOutliers are well-defined types of auxiliary variables, therefore when they are used (reg-arima or tramo modelling) they don’t need to be explicitly generated beforehand. Pre-specifying outliers is detailed in chapters on SA and SA of High-frequency data.\nADD:\n\nin v2 fixing coefficients impossible (window displayed as a calendar)\nin v3 calendar window or different window, allowing to fix coefficients\n\n\n\nGenerating regressors for outliers\nNevertheless, explicit regressors corresponding to outliers can be generated with rjd3toolkit functions for independent use. Further details rjd3toolkit help pages.\n\n#Outliers in February 2002, for monthly data\nlibrary(\"rjd3toolkit\")\nao &lt;- ao_variable(frequency=12, c(2000,1), length = 12*4, date = \"2002-02-01\")\nls &lt;- ls_variable(12, c(2000,1), length = 12*4, date = \"2002-02-01\")\ntc &lt;- tc_variable(12, c(2000,1), length = 12*4, date = \"2002-02-01\")\nso &lt;- so_variable(12, c(2000,1), length = 12*4, date = \"2002-02-01\")\n\n\n\n\nRamps\nA ramp effect means a linear increase or decrease in the level of the series over a specified time interval \\(t_{0}\\) to \\(\\ t_{1}\\). Ramps can overlap other ramps, additive outliers and level shifts. In seasonal adjustment their effected will be allocated to the trend.\nAdding ramps to a seasonal adjustment (or reg-arima/tramo) specification happens in one step in GUI as well as in R, where ramp regressors can nevertheless be independently generated.\n\nAdding ramps in GUI\nIn the specification window\n\nThe effect of the ramps is stored in reg_t pre-adjustment series.\n\n\nAdding ramps in R\nUse the function add_ramp\n\n# create a specification from a default specification \ninit_spec &lt;- rjd3x13::spec_x13(\"RSA5c\")\n\n# add ramp on year 2012\nnew_spec &lt;- rjd3toolkit::add_ramp(init_spec,start=\"2012-01-01\",end=\"2012-12-01\")\n\n\n\nGenerating ramp regressors in R\nUse ramp_variable function in rjd3toolkit:\n\n?ramp_variable\n# Ramp variable from January 2001 to September 2001 for a monthly series \nrp &lt;- ramp_variable(frequency=12, c(2000,1), length = 12*4, range = c(13, 21))\n# Or equivalently\nrp &lt;- ramp_variable(12, c(2000,1), length = 12*4, range = c(\"2001-01-01\", \"2001-09-02\"))\nplot.ts(rp)\n\nMore details rjd3toolkit pages.\n\n\n\nIntervention variables\nIntervention variables are modelled as any possible sequence of ones and zeros, on which differencing (regular and seasonal) can be applied.\nAdding intervention variables to a seasonal adjustment (or reg-arima/tramo) specification happens in one step when using the GUI, whereas two steps are required in R: generating the regressors and the adding them as an user-defined variable.\n\nAdding intervention variables in GUI\nstep 1:\n\nStep 2:\n\n\n\nGenerating intervention variables in R\nUsing intervention_variable function in rjd3toolkit\n\nlibrary(\"rjd3toolkit\")\n? intervention_variable\niv&lt;-intervention_variable(frequency=12, start=c(2000, 1), length=60,\n                      starts = \"2001-01-01\", ends = \"2001-12-01\")\niv\nplot(iv)\n\niv&lt;-intervention_variable(12, c(2000, 1), 60,\n                      starts = \"2001-01-01\", ends = \"2001-12-01\", delta = 1)\niv\nplot(iv)\n\niv&lt;-intervention_variable(12, c(2000, 1), 60,\n                          starts = \"2001-01-01\", ends = \"2001-12-01\",\n                          delta =0, seasonaldelta=1)\niv\nplot(iv)\n\nMore details rjd3toolkit help pages.\n\n\nAdding intervention variables in R\nIntervention variables can be added to a specification like any other external regressor using the add_usrdefvar. They also need to be declared in a “context” using the modelling_context function.\n\n# creating one or several external regressors (TS objects),\n# which will be gathered in one or several groups\niv1&lt;-intervention_variable(12, c(2000, 1), 60,\nstarts = \"2001-01-01\", ends = \"2001-12-01\")\niv2&lt;- intervention_variable(12, c(2000, 1), 60,\nstarts = \"2001-01-01\", ends = \"2001-12-01\", delta = 1)\n# regressors as a list of two groups (lists) reg1 and reg2\nvars&lt;-list(reg1=list(iv1 = iv1),reg2=list(iv2 = iv2) )\n# to use those regressors, input : name=reg1.iv1 and name=reg2.iv2 in add_usrdefvar function\n# creating the modelling context\nmy_context&lt;-modelling_context(variables=vars)\n# customize a default specification\ninit_spec &lt;- rjd3x13::spec_x13(\"RSA5c\")\n# regressors have to be added one by one\nnew_spec&lt;- add_usrdefvar(init_spec,name= \"reg1.iv1\", regeffect=\"Trend\")\nnew spec&lt;- add_usrdefvar(new_spec,name = \"reg2.iv2\", regeffect=\"Trend\", coef=0.7)\n# modelling context is needed for the estimation phase\n# raw series \ny&lt;-rjd3toolkit::ABS$X0.2.09.10.M\nsa_x13&lt;- rjd3x13::x13(y, new_spec, context = my_context)\n\n\n\n\nPeriodic dummies and contrasts\n\nGenerating regressors in R\ndummies :as many time series as type of periods in a year (4,12)\n\n## periodic dummies : add explanations and examples\np&lt;-periodic.dummies(4, c(2000,1), 60)\nhead(p)\nclass(p)\nq&lt;-periodic.contrasts(4, c(2000,1), 60)\nq[1:9,]\n\n\n\n\nTrigonometric variables\nCorrection for stable seasonality.\n\nGenerating in R\n\n\n\nUser-defined variables\nUser defined variables are simply time series used as explanatory regressors in the RegARIMA and the TRAMO models. Although JDemetra+ allows the user to indicate any time series as a variable to avoid misleading or erroneous results, the following rules should be kept:\n\nUser-defined regression variables are used for measuring abnormalities and therefore they should not contain a seasonal pattern.\nJDemetra+ assumes that user-defined regressors are already in an appropriately centred form.\n\nTherefore the mean of each user-defined regressor needs to be subtracted from the regressor or means for each calendar period (month or quarter) need to be subtracted from each of the user-defined regressors.\nJDemetra+ considers two kinds of user-defined regression variables:\n\nStatic variables, usually imported directly from external software (by drag/drop or copy/paste). The observations for static variables cannot be changed. The only way to update static series is to remove them from the list and to re-import them with the same names.\nDynamic variables that are imported into the Variables panel by dragging and dropping series from a browser of the application, available in the Providers window. Dynamic variables are automatically updated each time the application is re-opened. Therefore, it is a convenient solution for creating user-defined variables.\n\nTo create a dynamic variable first right-click on the Variables node in the Workspace window and chose the option New.\n\n\n\nCreating an empty dataset for the user-defined variables\n\n\nNext, double click on the newly created Vars-1 item to display it in the Results panel. By default, JDemetra+ uses the conventions Vars_#number to name the tabs under the Variables node.\n\n\n\nActivation of an empty dataset for the user-defined variables\n\n\nThen, go to Providers window and open your file that contains external variables following the instructions provided here. Drag and drop your external regressors from the Providers window to the Vars-1 window.\n\n\n\nImporting the user-defined variables to JDemetra+\n\n\nThe original name of the series is recorded in the Description column of the Variables window.\n\n\n\nAssigning regressors from the Providers window to the user-defined variables\n\n\nIn order to rename the series in the Variables window, right click on the series and chose Rename.\n\n\n\nA local menu for the user-defined variables\n\n\nOnce the variables are imported they can be used for further analysis (e.g. as regressors in the specifications for RegArima and TRAMO)."
  },
  {
    "objectID": "A-outlier-detection.html#outlier-detection",
    "href": "A-outlier-detection.html#outlier-detection",
    "title": "Outlier detection and external regressors",
    "section": "Outlier Detection",
    "text": "Outlier Detection\n\nWith Reg Arima models\n\nWithin an SA processing\nIn a seasonal adjustment estimation or reg-arima modelling outliers are detected by default. This process can be customized by selecting the type of outliers to be taken into account and the critical values to be used for selection. See the relevant chapters on SA and SA of High-frequency data\n\n\nStand alone\nR packages rjd3x13 and rjd3tramoseats provide functions for detecting outlier with reg-arima (tramo) algorithms.\nusing regarima_outliersin rjd3x13:\n\n?regarima_outliers\nregarima_outliers(rjd3toolkit::ABS$X0.2.09.10.M, order=c(1,1,1), seasonal=c(0,1,1), \n                  mean=F,\n                  X=NULL, X.td=NULL, \n                  ao=T, ls=F, tc=T, so=T, cv=4)\n\nADD example wit rjd3tramoseats::tramo_outliers\n\n\nSpecific TERROR tool\n\n\n\nWith structural models (BSM)"
  },
  {
    "objectID": "A-calendar-correction.html#chapters-overview",
    "href": "A-calendar-correction.html#chapters-overview",
    "title": "Calendar correction",
    "section": "Chapter’s overview",
    "text": "Chapter’s overview\nThis chapter is divided in two parts. The first one (theory) outlines the rationale for correcting calendar correction and the underlying modelling. The second part (practice) describes how relevant regressors for calendar correction are built in JDemetra+.\nAs calendar effects are deterministic, they can be corrected with a regression model. In the algorithms X13-Arima and Tramo-Seats it boils down to adding suitable regressors to the reg-arima modelling (pre-adjustment) phase. This chapter will describe how to generate a set of regressors corresponding to the desired correction, which will happen according to the following steps:\n\nstep 1: generate a calendar (usually national calendar of interest). If this step is skipped a default calendar, not taking into account country-specific holidays will be used.\nstep 2: generate regressors based on the above defined calendar\n\nRegressors will have the same frequency as the raw data, thus an aggregation process will be defined unless the data is daily.\n\nstep 2b: a specific variable for modelling the easter effect (or any other moving holiday effect like Ramadan) can also be defined\n\nMost of the functions are designed for quarterly and monthly data. What applies to daily and weekly data will be highlighted.\nRegressors are corrected for deterministic seasonality through a long-term mean correction (see below)\n\nstep 3: these regressors have to be plugged-in in pre-adjustment phase of a seasonal adjustment estimation. How to do this is detailed in chapters on SA or SA of HF data.\n\nHow to add other types of regressors is described here\n\nCalendar correction using R packages vs GUI: quick contrasting\n\nis group and reference day choice as flexible in GUI as in R ?\nin GUI (v3) automatic detection, what in R ?\nare the same data frequencies available in R and in GUI (divisors of 12 and…)\ncalendar correction HF data: R vs GUI ? including weekly data"
  },
  {
    "objectID": "A-calendar-correction.html#rationale-for-calendar-correction",
    "href": "A-calendar-correction.html#rationale-for-calendar-correction",
    "title": "Calendar correction",
    "section": "Rationale for Calendar correction",
    "text": "Rationale for Calendar correction\nA calendar is heterogeneous, it at least composed of:\n\ntrading days: days usually worked, taking into account the company’s sector. (Most frequently Mondays through Fridays when not bank holidays).\nweek-ends\nbank holidays\n\nFor a given year as well as throughout the years, every month doesn’t have the same number of days per day-type, which implies that all months/quarters aren’t “equal”, even for a given type of month or quarter. This causes calendar effects which have to be removed to allow sounder comparisons following the same principle as seasonality correction.\nTwo types of effects result from this heterogeneity:\n\nlength of period (month/quarter) (leap-year or direct correction)\ncomposition of period (type of day)\n\nThis second effect is also relevant for daily (and weekly) data.\nAn additional easter effect can be modelled, as for some series, variations linked to Easter can be seen over a few days prior or following Easter. For example, flowers and chocolate sales might rise significantly as Easter approaches. (in practice this effect is very rare, it is better to deactivate by default detection)"
  },
  {
    "objectID": "A-calendar-correction.html#modelling-calendar-effects",
    "href": "A-calendar-correction.html#modelling-calendar-effects",
    "title": "Calendar correction",
    "section": "Modelling calendar effects",
    "text": "Modelling calendar effects\n\nRegression Model for type of days\nFor each period \\(t\\), the days are divided in \\(K\\) groups \\(\\lbrace{D_{t1},\\dots, D_{tK}\\rbrace}\\).\nThe groups of days can be anything (trading days, working days, Sundays + holidays assimilated to Sundays…) ADD\nWe write \\(N_t=\\sum_1^K{D_{ti}}\\), the number of days of the period \\(t\\)\nTwo terms appear:\n\nthe specific effect of a type of day \\(i\\) as a contrast between the number of days \\(i\\) and the number of Sundays and bank holidays\nthe effect of the month’s (or period’s) length.\n\nOnce seasonally adjusted, this term comes down to the leap year effect:\n\nfor all months except Februaries \\(\\bar{N}_t = N_t\\)\nfor Februaries \\(\\bar{N}_t=28.25\\) and \\(N_{t}=28\\) or \\(N_{t}=29\\)\n\nThe effect of one day of the group \\(i\\) is measured by \\(\\alpha_i\\), so that the global effect of the group \\(i\\) for the period \\(t\\) is \\(\\alpha_i D_{ti}\\)\nThe global effect of all the days for the period \\(t\\) is\n\\[\\sum_{i=1}^K{\\alpha_i D_{ti}} = \\bar\\alpha N_t + \\sum_{i=1}^K{(\\alpha_i-\\bar\\alpha) D_{ti}}\\]\nwhere \\(\\bar\\alpha=\\sum_{i=1}^K{w_i \\alpha_i}\\) with \\(\\sum_{i=1}^Kw_i=1\\)\nSo,\n\\[\\sum_{i=1}^K{(\\alpha_i-\\bar\\alpha) w_i} = \\sum_{i=1}^K{\\alpha_iw_i}-\\bar\\alpha\\sum_{i=1}^K w_i=0 \\]\nLEAP YEAR part to comment\nWe focus now on \\(\\sum_{i=1}^K{(\\alpha_i-\\bar\\alpha) D_{ti}}\\), the actual trading days effects (excluding the length of period effect).\nWriting \\(\\alpha_i-\\bar\\alpha = \\beta_i\\) and using that \\(\\sum_{i=1}^K{\\beta_i w_i} = 0\\), we have that\n\\[\\sum_{i=1}^K{\\beta_i D_{ti}}=\\sum_{i=1}^K{\\beta_i(D_{ti} - \\frac{w_i}{w_K}}D_{tK})= \\sum_{i=1}^{K-1}{\\beta_i(D_{ti} - \\frac{w_i}{w_K}}D_{tK})\\]\nNote that the relationship is valid for any set of weights \\(w_i\\). It is also clear that the contrasting group of days can be any group:\n\\[\\sum_{i=1}^{K-1}{\\beta_i(D_{ti} - \\frac{w_i}{w_K}}D_{tK}) = \\sum_{i=1}^{K, i \\neq J}{\\beta_i(D_{ti} - \\frac{w_i}{w_J}}D_{tJ})\\]\nThe “missing” coefficient is easily derived from the others:\n\\[\\beta_K = -\\frac{1}{w_K}\\sum_{i=1}^{K-1}{\\beta_i w_i}  \\]\n\n\nCorrection for deterministic seasonality\nIn the case of seasonal adjustment, we further impose that the regression variables don’t contain deterministic seasonality. That is achieved by removing from each type of period (month, quarter…) its long term average. We write \\(\\bar{D_i^y}\\) the long term average of the yearly number of days in the group \\(i\\) and \\(\\bar{D_{i,J}^y}\\) the long term average of the number of days in the group \\(i\\) for the periods \\(J\\) (for instance, average number of Mondays in January…).\nThe corrected contrast for the time t belonging to the period J is:\n\\[C_{ti}=D_{ti}-\\bar{D_{i, J}^y}-\\frac{w_i}{w_K}(D_{tK}- \\bar{D_{K, J}^y})\\]\nHow is the long term mean computed? Probabilistic approach (more on this soon)\n\n\nWeights for different groups of days\nWe can define different sets of weights. The usual one consists in giving the same weight to each type of days. \\(w_i\\) is just proportional to the number of days in the group \\(i\\). In the case of “week days”, \\(w_0 = \\frac{5}{7}\\) (weeks) and \\(w_1=\\frac{2}{7}\\) (week-ends). In the case of “trading days”, \\(w_i=\\frac{1}{7}\\) … Another approach consists in using the long term yearly averages, taking into account the actual holidays. We get now that \\(w_i=\\frac{\\bar{D_i^y}}{365.25}\\).\nAfter the removal of the deterministic seasonality, the variables computed using the two sets of weights considered above are very similar. In the case of the “trading days”, the difference for the time \\(t\\), belonging to the period \\(J\\), and for the day \\(i\\) with contrast \\(K\\) is \\((1-\\frac{w_i}{w_K})(D_{tK}- \\bar{D_{K, J}^y})\\), which is usually small. By default, JD+ uses the first approach, which is simpler. The second approach is implemented in the algorithmic modules, but not available through the graphical interface.\n\n\nUse in RegArima models\nIn the context of RegArima modeling, we can also observe that the global effect of the trading days doesn’t depend neither on the used weights (we project on the same space) nor on the contrasting group (see above) nor on the long term corrections (removed by differencing).\nThe estimated coefficients slightly change if we use different weights (not if we use a different contrasting group). It must also be noted that the choices affect the T-Stat of the different coefficients (not the joint F-Test), which can lead to other solutions when those T-Stats are used for selecting the regression variables (Tramo). Considering that the leap year/length of period variable is nearly independent of the other variables, the test on that variable is not very sensitive to the various specifications.\n\n\nInterpretation\nThe use of different specifications of the trading days doesn’t impact the final results (except through some automatic selection procedure). It just (slightly) changes the way we interpret the estimated coefficients.\n\n\nEaster effect\n\n\nStock series"
  },
  {
    "objectID": "A-calendar-correction.html#usr_def_cal",
    "href": "A-calendar-correction.html#usr_def_cal",
    "title": "Calendar correction",
    "section": "Generating Regressors for calendar correction",
    "text": "Generating Regressors for calendar correction\nThe following parts details how to build customized regressors for calendar correction using\n\ngraphical user interface (GUI)\nrjd3toolkit package.\n\nTo take specific holidays into account a calendar has to be defined, regressors will be built subsequently.\nAs regressors have the same data frequency as the input series, several cases:\n\nfor daily series : regressors are dummies representing each holidays\nfor weekly, monthly and quarterly series regressors are aggregated indicators, the way of grouping different types of days and holidays has to be specified.\n\n\nIn GUI\n\nCreating calendars\nThe customized calendar can be directly linked to the calendar correction option in GUI while specifying a seasonal adjustment process. See chapters on SA or SA of HF data.\n\nDefault Calendar\nIn the graphical user interface, calendars in are stored in the Workspace window in the Utilities section. In the default calendar, country-specific national holidays are not taken into account, it reflects only the usual composition of the weeks in the calendar periods.\n\n\n\nText\n\n\nTo view the details of the default calendar: double click on it\n\n\n\nText\n\n\n\n\nSet Properties\nIn the Properties panel the user can set:\n\nFrequency (monthly, quarterly..)\nTrading days or working days regressors\n\nTrading days: 6 contrast variables\nnumber of Mondays - number of Sundays\nand one regressor for the leap year effect.\nWorking Days: 1 contrast variable (\\(number\\ of\\ working days (monday to friday) - number\\ of\\ Saturdays and Sundays\\),…) and one regressor for the leap year effect.\n\n\n\nText\n\n\nModification of the initial settings for the Default calendar\n\n\nSpectrum visualization\nThe top-right panel displays the spectrum for the given calendar variable. By default, the first variable from the table is shown.\n\nTo change it, click on the calendar variable header.\n\nCalendar variables shouldn’t have a peak neither at a zero frequency (trend) nor the seasonal frequencies.\n\n\n\nText\n\n\n\n\n\nModify an existing Calendar\n\nclick the option Edit from the context menu\nthe list of holidays defined for this calendar is displayed\n\n\n\n\nText\n\n\nEdit a calendar window\n\nTo add a holiday unfold the + menu\nTo remove a holiday click on it and choose the - button\n\n\n\n\nText\n\n\nRemoving a holiday from the calendar\n\nCreating a new calendar\nAn appropriate calendar, containing the required national holidays, needs to be created to adjust a series for country-specific calendar effects.\n\nright click on the Calendar item from the Workspace window and choose Add\n\n\n\n\nText\n\n\nThree options are available:\n\nNational calendars: allows to include country-specific holidays\nComposite calendars : creates calendar as a weighted sum of several national calendars\nChained calendars : allows to chain two national calendars before and after a break\n\n\n\nNational Calendar\nTo define a national calendar: right click on Calendar item in the Utility panel of the workspace window\n\n\n\nText\n\n\n\nTo add a holiday unfold the + menu\nTo remove a holiday from the list click on it and choose the - button.\n\n\n\n\nText\n\n\nFour options are available here:\n- **Fixed** : holiday occurring at the same date\n\n- **Easter Related**: holiday that depends on Easter Sunday date\n\n- **Fixed Week**: fixed holiday that always falls in a specific week of a given month\n\n- **Special Day**:  choose a holiday from a list of pre-defined holidays (link to table)\n\n\n\nText\n\n\n\nto use Julian Easter\n\n\n\n\nText\n\n\nTo add a holiday from this list to the national calendar, choose the Special day item from the Special days list.\n Adding a pre-defined holiday to the calendar\nBy default, when the Special Days option is selected, JDemetra+ always adds Christmas to the list of selected holidays. The user can change this initial choice by specifying the settings in the panel on the right and clicking OK. The settings that can be changed include:\n\nStart: starting date for the holiday (expecting yyyy-mm-dd) Default is the starting date of the calendar (empty cell).\nEnd: same as start\nWeight : specifies the impact of the holiday on the series. The default weight is 1 (full weight) assuming that the influence of the holiday is the same as a regular Sunday. If less the a value between 0 and 1 can be assigned.\nDay event: a list of pre-defined holidays (link to table)\nOffset: allows to set a holiday as related to a pre-specified holiday by specifying the distance in days (e.g Easter Sunday). Default offset is 1. It can be positive or negative. Positive offset: defines a holiday following the pre-specified holiday. Negative offset: defines a holiday preceding the selected pre-specified.\n Choosing a pre-defined holiday from the list\nTo define a fixed holiday not included in the list of pre-defined holidays:\n\nchoose Fixed from the Special days list: by default January, 1 is displayed. Specify the settings:\n\nStart: starting date for the holiday (expecting yyyy-mm-dd) Default is the starting date of the calendar (empty cell).\nEnd: same as start\nWeight : specifies the impact of the holiday on the series. The default weight is 1 (full weight) assuming that the influence of the holiday is the same as a regular Sunday. If less the a value between 0 and 1 can be assigned.\nDay: day of month when the fixed holiday is celebrated.\nMonth: month, in which the fixed holiday is celebrated.\n\n\n\n\nText\n\n\nOptions for a fixed holiday\n\nAdd Corpus Christi: example of an Easter related holiday not included in the special day list(link to table). It is is a moving holiday celebrated 60 days after Easter\n\nchoose the Easter related item from the Special days list.\n\n By default Easter + 1 is displayed. Setting can be changed :\nStart: starting date for the holiday (expecting yyyy-mm-dd) Default is the starting date of the calendar (empty cell).\nEnd: same as start\nWeight : specifies the impact of the holiday on the series. The default weight is 1 (full weight) assuming that the influence of the holiday is the same as a regular Sunday. If less the a value between 0 and 1 can be assigned.\nOffset: To define Corpus Christi enter 60, as it is celebrated 60 days after Easter Sunday.\n\n\n\n\nText\n\n\n\nFixed week option: when dealing with holidays occurring on the same week of a given month. Example: Labour Day in the USA and Canada, celebrated on the first Monday of September in Canada\n\nchoose Fixed Week from the Special days list.\n\n\n\n\nText\n\n\n\nAvailable settings are:\n\nStart: starting date for the holiday (expecting yyyy-mm-dd) Default is the starting date of the calendar (empty cell).\nEnd: same as start\nWeight : specifies the impact of the holiday on the series. The default weight is 1 (full weight) assuming that the influence of the holiday is the same as a regular Sunday. If less the a value between 0 and 1 can be assigned\nDay of Week: day of week when the holiday is celebrated each year\nMonth: month, in which the holiday is celebrated each year\nWeek: number denoting the place of the week in the month: between 1 and 5\n\n\n\n\nText\n\n\nThe list of the holidays should contain only unique entries. Otherwise, a warning, as shown in the picture below, will be displayed.\n\n\n\nText\n\n\nA calendar without a name cannot be saved. Fill the Name box before saving the calendar.\n\n\n\nText\n\n\nExample : final view of a properly defined calendar for Poland\n\n\n\nText\n\n\nThe calendar is visible in the Workspace window\n\nTo display the available options right-click on it\n\nA national calendar can be edited, duplicated (to create another calendar) and/or analysed (double click to display it in the panel on the right) or deleted.\n\n\nChained Calendar\nCreating a chained calendar is relevant when a major break occurs in the definition of the country-specific holidays.\nFirst define the 2 (or \\(N\\)) national calendars corresponding to each regime as explained in the section above.\nTo define a chained calendar: right click on Calendar item in the Utility panel of the workspace window\n\n\n\nText\n\n\nIn the Properties panel specify:\n\nfirst and the second calendar\nbreak date\n\n\n\n\nText\n\n\n\n\nComposite Calendar\nCreating a composite calendar is relevant when correcting series which include data from more than one country/region. This option can be used, for example, to create the calendar for the European Union or to create the national calendar for a country, in which regional holidays are celebrated.\nFirst define the relevant national calendars corresponding to each member state/region as explained above.\nTo define a chained calendar: right click on Calendar item in the Utility panel of the workspace window\n\n\n\nText\n\n\n\nFill the name box\nMark the regional calendars to be used\nAssign a weight to each calendar.\n\n\n\n\nText\n\n\n\n\nImporting an existing calendar from a file\nRight click on the Calendar item from the Workspace window and choose the Import item from the menu.\n\n\n\nText\n\n\nImporting a calendar to JDemetra+\n\nchoose the appropriate file and open it\n\n\n\n\nText\n\n\nChoosing the file\nJDemetra+ adds it to the calendars list\n\n\n\nText\n\n\nA list of calendars with a newly imported calendar\n\n\nExample of a calendar file\nexample of a html file containing a calendar\n #### Generating regressors\n\n\nType of days\n\n\nLeap year\n\n\nLength of Period\n(adjust param)\n\n\nEaster\n\n\nstock TD\n\n\n\n\nIn R with rjd3toolkit\nVersion 3 of JDemetra+ allows to build calendar regressors using the rjd3toolkit package.\nThe underlying concepts are identical to those available in the graphical user interface (GUI) as described above. R functions replicate the same process and all arguments and outputs are detailed in rjd3toolkit help pages. The sections below provide basic examples.\nNote that, RJDemetra package based on version 2 of JDemetra+, doesn’t allow to build calendars and generate regressors. Thus, two approaches are possible when using version 2\n\nuse built in regressors (“working days” or “trading days”) not taking into account national holidays\nimport user defined calendar regressors\n\n\nCreating calendars\n\nNational Calendar\nCreating a national calendar with rjd3toolkit.\n\n## French calendar\nfrenchCalendar &lt;- national_calendar(days = list(\n  fixed_day(7, 14), # Bastille Day\n  fixed_day(5, 8, validity = list(start = \"1982-05-08\")),# End of 2nd WW\n  special_day('NEWYEAR'), \n  special_day('CHRISTMAS'), \n  special_day('MAYDAY'),\n  special_day('EASTERMONDAY'), \n  special_day('ASCENSION'), #\n  special_day('WHITMONDAY'), \n  special_day('ASSUMPTION'), \n  special_day('ALLSAINTSDAY'),\n  special_day('ARMISTICE'))\n)\n\nHolidays can be created with the following ways:\n\nas fixed days (falling on the exact same date every year)\n\n\nday &lt;- fixed_day(month= 12, day=25,weight= .9, validity = list(start=\"1968-02-01\", end = \"2010-01-01\"))\nday # December 25th, with weight=0.9, from February 1968 until January 2010\n\n\nas special days, when on the list of common holidays, which is available in the function’s halp page.\n\n\n# Get the list \n?special_day\n# To define a holiday for the day after Christmas, with validity and weight\nspecial_day(\"CHRISTMAS\", offset = 1, weight = 0.8,\nvalidity = list(start=\"2000-01-01\", end = \"2020-12-01\"))\n\n\nas a fixed week day\n\n\nfixed_week_day(7, 2, 3) # second Wednesday of July\n\n\nas an easter related holiday\n\n\n     easter_day(1), # Easter Monday\n     easter_day(-2), # Good Friday\n\nAn example of calendar bringing together all options\n\nMyCalendar &lt;- national_calendar(list(\n    fixed_day(7,21),\n     special_day('NEWYEAR'),\n     special_day('CHRISTMAS'),\n     fixed_week_day(7, 2, 3), # second Wednesday of July\n     special_day('MAYDAY'),\n     easter_day(1), # Easter Monday\n     easter_day(-2), # Good Friday\n     fixed_day(5, 8, validity = list(start = \"1982-05-08\")), # End of 2nd WW\n     single_day(\"2001-09-11\"), # appearing once \n     special_day('ASCENSION'),\n     easter_day(offset=60,julian=FALSE, weight=0.5, validity = list(start=\"2000-01-01\", end = \"2020-12-01\")),  # Corpus Christi\n     special_day('WHITMONDAY'),\n     special_day('ASSUMPTION'),\n     special_day('ALLSAINTSDAY'),\n     special_day('ARMISTICE')))\n\nFor any defined calendar, it is possible to retrieve the long term-mean correction values which would be applied on a given set of regressors.\n\n### Long-term means of a calendar\nBE &lt;- national_calendar(list(\n    fixed_day(7,21),\n    special_day('NEWYEAR'),\n    special_day('CHRISTMAS'),\n    special_day('MAYDAY'),\n    special_day('EASTERMONDAY'),\n    special_day('ASCENSION'),\n    special_day('WHITMONDAY'),\n    special_day('ASSUMPTION'),\n    special_day('ALLSAINTSDAY'),\n    special_day('ARMISTICE')))\nclass(BE)\nlt &lt;- long_term_mean(BE,12,\n    groups = c(1,1,1,1,1,0,0),\n    holiday = 7)\n\n\n\nChained Calendar\nCreating a chained calendar is relevant when a major break occurs in the definition of the country-specific holidays.\nFirst define the 2 (or \\(N\\)) national calendars corresponding to each regime as explained in the section above.\n\nBelgium &lt;- national_calendar(list(special_day('NEWYEAR'),fixed_day(7,21)))\nFrance &lt;- national_calendar(list(special_day('NEWYEAR'),fixed_day(7,14)))\nchained_cal&lt;-chained_calendar(France, Belgium, \"2000-01-01\")\n\n\n\nComposite Calendar\nCreating a composite calendar is relevant when correcting series which include data from more than one country/region. This option can be used, for example, to create the calendar for the European Union or to create the national calendar for a country, in which regional holidays are celebrated.\n\nBelgium &lt;- national_calendar(list(special_day('NEWYEAR'),fixed_day(7,21)))\nFrance &lt;- national_calendar(list(special_day('NEWYEAR'),fixed_day(7,14)))\ncomposite_calendar&lt;- weighted_calendar(list(France,Belgium), weights = c(1,2))\n\n\n\n\nGenerating regressors\nFirst for monthly, Q, bi monthly…(set this right)\n\nType of days\nThis section describes how to generate regressors to correct for type of days effects. They can be based on a default calendar (no specific holidays taken into account) or on a customized calendar.\n\nTrading day regressors without holidays using rjd3toolkit::td function\n\n# Monthly regressors for Trading Days: each type of day is different\n# contrasts to Sundays (6 series)\n?td \nregs_td&lt;- td(frequency=12,c(2020,1),60, groups = c(1, 2, 3, 4, 5, 6, 0), contrasts = TRUE)\n\nThe groups argument allows to build groups of days, as daus belonging to the same group will be identified by the same number, and to set a reference for contrasts with the number 0.\n\n\nTrading day regressors with pre-defined holidays using rjd3toolkit::calendar_td function\nThe rjd3toolkit::calendar_td function\n\n?calendar_td\n# first define a calendar\nBE &lt;- national_calendar(list(\n    fixed_day(7,21),\n    special_day('NEWYEAR'),\n    special_day('CHRISTMAS'),\n    special_day('MAYDAY'),\n    special_day('EASTERMONDAY'),\n    special_day('ASCENSION'),\n    special_day('WHITMONDAY'),\n    special_day('ASSUMPTION'),\n    special_day('ALLSAINTSDAY'),\n    special_day('ARMISTICE')))\n# generate regressors\ncalendar_td(BE, frequency=12, c(1980,1), 240, holiday=7, groups=c(1,1,1,2,2,3,0),\ncontrasts = FALSE)\n# here three groups and one reference are defined\n# Mondays = Tuesdays= Wednesdays (`1`)\n# Thursdays= Fridays (`2`)\n# Saturdays (`3`)\n# Sundays and all holidays (`0`) \n\n\n\n\nLeap year\n\n\nLength of Period\nadjust param\n\n\nEaster Regressor\nCreate a regressor for modelling the easter effect:\n\n#Monthly regressor, five-year long, duration 8 days, effect finishing on Easter Monday\nee &lt;- easter_variable(frequency=12, c(2020,1),length=5*12,duration=8, endpos=1)\n\nDisplay Easter Sunday dates in given period\nThe function below allows to display the date of Easter Sunday for each year, in the defined period. Dates are displayed in “YYYY-MM-DD” format and as a number of days since January 1st 1970.\n\n#Dates from 2018(included) to 2023 (included)\neaster_dates(2018, 2023)\n\n\n\nstock TD\n\n\nDaily data (dummies)\n\n## dummies corresponding to holidays\nq &lt;- holidays(BE, \"2020-01-01\",365.25, type=\"All\")\ntail(q)\n\n\nWeekly data"
  },
  {
    "objectID": "A-calendar-correction.html#test-for-residual-calendar-effects",
    "href": "A-calendar-correction.html#test-for-residual-calendar-effects",
    "title": "Calendar correction",
    "section": "Test for Residual Calendar effects",
    "text": "Test for Residual Calendar effects\n(To be added: where exactly to find the tests in GUI and R)\nWe consider below tests on the seasonally adjusted series (\\(sa_t\\)) or on the irregular component (\\(irr_t\\)). When the reasoning applies on both components, we will use \\(y_t\\). The functions \\(stdev\\) stands for “standard deviation” and \\(rms\\) for “root mean squares”\nThe tests are computed on the log-transformed components in the case of multiplicative decomposition.\nTD are the usual contrasts of trading days, 6 variables (no specific calendar).\n\nNon significant irregular\nWhen \\(irr_t\\) is not significant, we don’t compute the test on it, to avoid irrelevant results. We consider that \\(irr_t\\) is significant if \\(stdev( irr_t)&gt;0.01\\) (multiplicative case) or if \\(stdev(irr_t)/rms(sa_t) &gt;0.01\\) (additive case).\n\n\nF test\nThe test is the usual joint F-test on the TD coefficients, computed on the following models:\n\nAutoregressive model (AR modelling option)\nWe compute by OLS:\n\\[y_t=\\mu + \\alpha y_{t-1} + \\beta TD_t + \\epsilon_t \\]\n\n\nDifference model\nWe compute by OLS:\n\\[\\Delta y_t - \\overline{\\Delta y_t}=\\beta TD_t + \\epsilon_t \\]\nSo, the latter model is a restriction of the first one (\\(\\alpha =1, \\mu =μ=\\overline{\\Delta y_t}\\))\nThe tests are the usual joint F-tests on \\(\\beta \\quad (H_0:\\beta=0)\\).\nBy default, we compute the tests on the 8 last years of the components, so that they might highlight moving calendar effects.\nRemark:\nIn Tramo, a similar test is computed on the residuals of the Arima model. More exactly, the F-test is computed on \\(e_t=\\beta TD_t + \\epsilon_t\\), where \\(e_t\\) are the one-step-ahead forecast errors."
  },
  {
    "objectID": "A-benchmarking.html#benchmarking-overview",
    "href": "A-benchmarking.html#benchmarking-overview",
    "title": "Benchmarking and temporal disagreggation",
    "section": "Benchmarking overview",
    "text": "Benchmarking overview\nOften one has two (or multiple) datasets of different frequency for the same target variable. Sometimes, however, these data sets are not coherent in the sense that they don’t match up. Benchmarking[^1] is a method to deal with this situation. An aggregate of a higher-frequency measurement variables is not necessarily equal to the corresponding lower-frequency less-aggregated measurement. Moreover, the sources of data may have different reliability levels. Usually, less frequent data are considered more trustworthy as they are based on larger samples and compiled more precisely. The more reliable measurements, hence often the less frequent, will serve as benchmark.\nIn seasonal adjustment methods benchmarking is the procedure that ensures the consistency over the year between adjusted and non-seasonally adjusted data. It should be noted that the [ESS Guidelines on Seasonal Adjustment (2015)] (https://ec.europa.eu/eurostat/documents/3859598/6830795/KS-GQ-15-001-EN-N.pdf/d8f1e5f5-251b-4a69-93e3-079031b74bd3), do not recommend benchmarking as it introduces a bias in the seasonally adjusted data. The U.S. Census Bureau also points out that “forcing the seasonal adjustment totals to be the same as the original series annual totals can degrade the quality of the seasonal adjustment, especially when the seasonal pattern is undergoing change. It is not natural if trading day adjustment is performed because the aggregate trading day effect over a year is variable and moderately different from zero”[^2]. Nevertheless, some users may need that the annual totals of the seasonally adjusted series match the annual totals of the original, non-seasonally adjusted series[^3].\nAccording to the [ESS Guidelines on Seasonal Adjustment (2015)] (https://ec.europa.eu/eurostat/documents/3859598/6830795/KS-GQ-15-001-EN-N.pdf/d8f1e5f5-251b-4a69-93e3-079031b74bd3), the only benefit of this approach is that there is consistency over the year between adjusted and the non-seasonally adjusted data; this can be of particular interest when low-frequency (e.g. annual) benchmarking figures officially exist (e.g. National Accounts, Balance of Payments, External Trade, etc.) and where users’ needs for time consistency are stronger."
  },
  {
    "objectID": "A-benchmarking.html#tools",
    "href": "A-benchmarking.html#tools",
    "title": "Benchmarking and temporal disagreggation",
    "section": "Tools",
    "text": "Tools\n\nBenchmarking with GUI\n\nWith the pre-defined specifcations the benchmarking functionality is not applied by default following the ESS Guidelines on Seasonal Adjustment (2015) recommendations. It means that once the user has seasonally adjustd the series with a pre-defined specifcation the Benchmarking node is empty. To execute benchmarking click on the Specifications button and activate the checkbox in the Benchmarking section.\n\nBenchmarking option – a default view\nThree parameters can be set here. Target specifies the target variable for the benchmarking procedure. It can be either the Original (the raw time series) or the Calendar Adjusted (the time series adjusted for calendar effects). Rho is a value of the AR(1) parameter (set between 0 and 1). By default it is set to 1. Finally, Lambda is a parameter that relates to the weights in the regression equation. It is typically equal to 0 (for an additive decomposition), 0.5 (for a proportional decomposition) or 1 (for a multiplicative decomposition). The default value is 1.\nTo launch the benchmarking procedure click on the Apply button. The results are displayed in four panels. The top-left one compares the original output from the seasonal adjustment procedure with the result from applying a benchmarking to the seasonal adjustment. The bottom-left panel highlights the differences between these two results. The outcomes are also presented in a table in the top-right panel. The relevant statistics concerning relative differences are presented in the bottom-right panel.\n\nThe results of the benchmarking procedure\nBoth pictures and the table can be copied the usual way (see the Simple seasonal adjustment of a single time series scenario).\n\nOptions for benchmarking results\nTo export the result of the benchmarking procedure (benchmarking.result) and the target data (benchmarking.target) one needs to once execute the seasonal adjustment with benchmarking using the muli-processing option (see the Simple seasonal adjustment of multiple time series scenario. Once the muli-processing is executed, select the Output item from the SAProcessing menu.\n\nThe SAProcessing menu\nExpand the \"+\" menu and choose an appropriate data format (here Excel has been chosen). It is possible to save the results in TXT, XLS, CSV, and CSV matrix formats. Note that the available content of the output depends on the output type.\n\nExporting data to an Excel file\nChose the output items that refer to the results from the benchmarking procedure, move them to the window on the right and click OK.\n\nExporting the results of the benchmarking procedure\n\n\n\nBenchmarking in R\nSee package rjd3bench and its documentation pages in R."
  },
  {
    "objectID": "A-trend-cycle-estimation.html#overview",
    "href": "A-trend-cycle-estimation.html#overview",
    "title": "Trend-cycle estimation",
    "section": "Overview",
    "text": "Overview"
  },
  {
    "objectID": "A-trend-cycle-estimation.html#estimation-methods",
    "href": "A-trend-cycle-estimation.html#estimation-methods",
    "title": "Trend-cycle estimation",
    "section": "Estimation Methods",
    "text": "Estimation Methods"
  },
  {
    "objectID": "A-trend-cycle-estimation.html#tools",
    "href": "A-trend-cycle-estimation.html#tools",
    "title": "Trend-cycle estimation",
    "section": "Tools",
    "text": "Tools\n\nrjd3highfeq package\n\n\nrjdfilters package"
  },
  {
    "objectID": "A-nowcasting.html",
    "href": "A-nowcasting.html",
    "title": "Nowcasting",
    "section": "",
    "text": "Under construction."
  },
  {
    "objectID": "P_Tools.html",
    "href": "P_Tools.html",
    "title": "Tools",
    "section": "",
    "text": "The different tools described in this part:\n\nGraphical User Interface GUI\n…enhanced with additional plug-ins\n..and a Cruncher for mass production\nR packages"
  },
  {
    "objectID": "T-GUI-Overview.html#in-this-chapter",
    "href": "T-GUI-Overview.html#in-this-chapter",
    "title": "Graphical User Interface Overview",
    "section": "In this chapter",
    "text": "In this chapter\nThis chapter provides general information about using the graphical interface (GUI). Specific indications related to a given algorithm (X13-Arima, Tramo-seats, Benchmarking…) are displayed in the relevant chapters.\nContents\n\ninstallation and launch\ngeneral window and menu structure\nimporting data\n\n\nAvailable algorithms\nThe graphical user interface in the 2.x family gives access to:\n\nSeasonal adjustment (SA) algorithms\n\nX13-Arima\nTramo-Seats\nDirect-indirect SA comparisons\n\nOutlier detection (TERROR)\nBenchmarking\n\nThe graphical user interface in the 3.x family gives access in addition to extended SA algorithms for high-frequency data (HF).\n\n\nAvailable Time Series tools\nThe graphical user interface in the 2.x and 3.x family give access to generic time series tools:\n\nGraphics\n\ntime domain\nspectral analysis\n\nTests\n\nseasonality tests\nautocorrelation, normality, randomness tests"
  },
  {
    "objectID": "T-GUI-Overview.html#installation-procedure",
    "href": "T-GUI-Overview.html#installation-procedure",
    "title": "Graphical User Interface Overview",
    "section": "Installation Procedure",
    "text": "Installation Procedure\n\nVersion 2.2.4\nLatest release of version 2\nJDemetra+ is a stand-alone application packed in a zip package.\n\n\nVersion 3\n\n\nLaunching JDemetra+\nTo open an application, double click on nbdemetra.exe or nbdemetra64.exe depending on the system version (nbdemetra.exe for the 32-bit system version and nbdemetra64.exe for the 64-bit system version).\n\n\n\nLaunching JDemetra+\n\n\nIf the launching of JDemetra+ fails, you can try the following operations:\n\nCheck if Java SE Runtime Environment (JRE) is properly installed by typing in the following command in a terminal: java –version\nCheck the logs in your home directory:\n\n%appdata%/.nbdemetra/dev/var/log/ for Windows;\n~/.nbdemetra/dev/var/log/ for Linux and Solaris;\n~/Library/Application Support/.nbdemetra/dev/var/log/ for Mac OS X.\n\n\nIn order to remove a previously installed JDemetra+ version, the user should delete an appropriate JDemetra+ folder."
  },
  {
    "objectID": "T-GUI-Overview.html#starting-window",
    "href": "T-GUI-Overview.html#starting-window",
    "title": "Graphical User Interface Overview",
    "section": "Starting Window",
    "text": "Starting Window\n\n\n\nJDemetra+ default window\n\n\nBy default, on the left hand side of the window two panels are visible:\n\nthe Workspace panel stores the results generated by the software as well as settings used to create them;\nand the Providers panel organises the imported raw data within each data provider;\n\nThe other key parts of the user interface are:\n\nThe application menu.\nA central empty zone for presenting the actual analyses further called the Results panel."
  },
  {
    "objectID": "T-GUI-Overview.html#providers-window",
    "href": "T-GUI-Overview.html#providers-window",
    "title": "Graphical User Interface Overview",
    "section": "Providers window",
    "text": "Providers window\n\n\n\nThe Providers window\n\n\nBy default, JDemetra+ supports the following data sources:\n\nJDBC;\nODBC;\nSDMX;\nExcel spreadsheets;\nTSW (input files for the Tramo-Seats-Windows application by the Bank of Spain);\nTXT;\nUSCB (input files for the X-13-ARIMA-SEATS application by the U.S. Census Bureau);\nXML.\n\nAll standard databases (Oracle, SQLServer, DB2, MySQL) are supported by JDemetra+ via JDBC, which is a generic interface to many relational databases. Other providers can be added by users by creating plugins (see Plugins section in the Tools menu).\n\nImport data\nGeneral remarks on file structure and series identification - series are identified by their names\n\nSpreadsheet\nAn example of importing process for the Excel file :\n\nTo import data from a given data source, click on this data source in the Providers window shown below, choose Open option and specify the import details, such as a path to a data file. These details vary according to data providers. The example below show how to import the data from an Excel file.\n\nFrom the Providers window right-click on the Spreadsheets branch and choose Open option.\n\nThe Open data source window contains the following options:\n\nSpreadsheet file – a path to access the Excel file.\nData format – the data format used to read dates and values. It includes three fields: locale (country), date pattern (data format, e.g. yyyy-mm-dd), number pattern (a metaformat of numeric value, e.g. 0.## represents two digit number).\nFrequency – time series frequency. This can be undefined, yearly, half-yearly, four-monthly, quarterly, bi-monthly, or monthly. When the frequency is set to undefined, JDemetra+ determines the time series frequency by analysing the sequence of dates in the file.\nAggregation type – the type of aggregation (over time for each time series in the dataset) for the imported time series. This can be None, Sum, Average, First, Last, Min or Max. The aggregation can be performed only if the frequency parameter is specified. For example, when frequency is set to Quarterly and aggregation type is set to Average, a monthly time series is transformed to quarterly one with values that are equal to the one third of the sum of the monthly values that belong to the corresponding calendar quarter.\nClean missing – erases the missing values of the series.\n\nNext, in the Source section click the grey “…” button to open the file.\n\nChoose a file and click OK.\n\nThe user may specify Data format, Frequency and Aggregation type, however this step is not compulsory. When these options are specified JDemetra+ is able to convert the time series frequency. Otherwise, the functionality that enables the time series frequency to be converted will not be available.\n\nThe data are organized in a tree structure.\n\n\nOnce imported, your spread sheet is visible as a “node” structure\n\n\n\nA structure of a dataset\n\n\n\n\nHow to set-up your spreadsheet\n(collapase/ expand)\n\ndates in Excel date format, in the first column (or in the first row)\ntitles of the series in the corresponding cell of the first row (or in the first column)\ntop-left cell \\(A1\\) can include text or it can be left empty\nempty cells are interpreted by JDemetra+ as missing values\nif empty cells are at the begining of the series they can be ignored wusing the option clean-missing.\n\n\n\n\nExample of an Excel spreadsheet that can be imported to JDemetra+\n\n\n\n\nText or csv file\n\n\nHow to set up you text or csv file\nexpand/ collapse\n\n\n\nWrangling data\nSeries uploaded to the Providers window can be\n\ndisplayed, modified\ntested for seasonality/ white noise ?\n\nor used in any available algorithm (link to list)\n\nmodelled Modelling\nseasonnally adjusted\nbenchmarked\n\n\n\nBehaviour options\nThe data sources can be restored after re-starting the application so that there is no need to get them again. This functionality can be set in the Behaviour tab available at the Option item from the Tools menu.\nadd star ?"
  },
  {
    "objectID": "T-GUI-Overview.html#workspace-window",
    "href": "T-GUI-Overview.html#workspace-window",
    "title": "Graphical User Interface Overview",
    "section": "Workspace Window",
    "text": "Workspace Window\nThe workspace window displays the characteristics of a workspace\nbut ALSO gives access to other peripheric routines, the results of which won’t be stored in a workspace (as data structure)\nRephrase everything below\nNOT TRUE: “The content of the workspace is presented in the Workspace window. It is divided into three sections:”\n\nModelling (contains the default and user-defined specifications for modelling; and the output from the modelling process)\nSeasonal adjustment (contains the default and user-defined specifications for seasonal adjustment and the output from the seasonal adjustment process),\nUtilities (calendars and user defined variables).\n\n\n\n\nThe Workspace window\n\n\n\nModelling\nThe algorithms implemented in JDemetra+ enable a modelling of the original time series with the RegARIMA model, including estimation of the regression effects such as outliers and calendar effects. These procedures can be used just for modelling and forecasting of the original time series but also as a pre-treatment before performing a seasonal adjustment of the series. Hence, this pre-treatement will allow for a more reliable estimation of the time series components performed by the seasonal adjustment procedures.\nThis section is divided into two parts: * Specifications, which presents parameters of the modelling procedure. * Output, which details a typical output produced by the modelling procedure.\nThe specifications and output of the modelling procedure are displayed in the Workspace window.\n\n\n\nThe Workspace window with the nodes for the modelling procedure marked\n\n\n\n\nSeasonal adjustment\nThe primary aim of the seasonal adjustment process is to remove seasonal fluctuations from the time series. To achieve this goal, seasonal adjustment methods decompose the original time series into components that capture specific movements. These components are: trend-cycle, seasonality and irregularity. The trend-cycle component includes long-term and medium-term movements in the data. For seasonal adjustment purposes there is no need to divide this component into two parts. JDemetra+ refers to the trend-cycle as trend and consequently this convention is used here.\nThis section presents the options of the seasonal adjustment processes performed by the methods implemented in JDemetra+ (X-12-ARIMA/X-13ARIMA-SEATS and TRAMO/SEATS) and discusses the output displayed by JDemetra+. As these seasonal adjustment methods use different approach to the decomposition, the output produced for both of them has different structure and content. Therefore, the results for both methods are discussed separately. However, in contrast to the original programs, in JDemetra+ some quality indicators have been implemented for both methods, allowing for an easier comparison of the results.\nThis section is divided into two parts:\n\nSpecifications, which presents parameters of the seasonal adjustment procedure.\nOutput, which explains a typical output produced by the seasonal adjustment procedure.\n\nThe specifications and output for the seasonal adjustment procedure are displayed in the Workspace window under the Seasonal adjustment item.\n\n\n\nThe Workspace window with the nodes for the seasonal adjustment procedure marked"
  },
  {
    "objectID": "T-GUI-Overview.html#results-panel",
    "href": "T-GUI-Overview.html#results-panel",
    "title": "Graphical User Interface Overview",
    "section": "Results panel",
    "text": "Results panel\n(rephrase + compact)\nThe blank zone in the figure above (on the right of the view) is the location where JDemetra+ displays various windows. More than one window can be displayed at the same time. Windows can overlap with each other with the foremost window being the one in focus or active. The active window has a darkened title bar. The windows in the results panel can be arranged in many different ways, depending on the user’s needs. The example below shows one of the possible views of this panel. The results of the user’s analysis are displayed in an accompanying window. The picture below shows two panels – a window containing seasonal adjustment results (upper panel) and another one containing an autoregressive spectrum (lower panel).\n\n\n\nThe Results panel filled with two windows"
  },
  {
    "objectID": "T-GUI-Overview.html#top-bar-menus-and-options",
    "href": "T-GUI-Overview.html#top-bar-menus-and-options",
    "title": "Graphical User Interface Overview",
    "section": "Top Bar Menus and options",
    "text": "Top Bar Menus and options\n\n\n\nThe Top bar menus\n\n\nThe majority of functionalities are available from the main application menu, which is situated at the very top of the main window. If the user moves the cursor to an entry in the main menu and clicks on the left mouse button, a drop-down menu will appear. Clicking on an entry in the drop-down menu selects the highlighted item.\n\n\n\nThe main menu with selected drop-down menu\n\n\nThe functions available in the main application menu are:\n\nFile\nStatistical methods\nTools\nView\nWindow\nHelp\nRegArimaDoc\nX-13Doc\nTramoDoc\nTramoSeatsDoc\nSAProcessingDoc\n\n\nFile\nThe File menu is intended for working with workspaces and data sources. It offers the following functions:\n\nNew Workspace – creates a new workspace and displays it in the Workspace window with a default name (Workspace_#number);\nOpen Workspace – opens a dialog window, which enables the user to select and open an existing workspace;\nOpen Recent Workspace – presents a list of workspaces recently created by the user and enables the user to open one of them;\nSave Workspace – saves the project file named by the system under the default name (Workspace_#number) and in a default location. The workspace can be re-opened at a later time;\nSave Workspace As… – saves the current workspace under the name chosen by the user in the chosen location. The workspace can be re-opened at a later time;\nOpen Recent – presents a list of datasets recently used and enables the user to open one of them;\nExit – closes an application.\n\n\n\n\nThe content of the File menu\n\n\n\n\nStatistical Methods\nHere just a hint and link to relevant chapters\nThe Statistical methods menu includes functionalities for modelling, analysis and the seasonal adjustment of a time series. They are divided into three groups:\n\nAnomaly Detection – allows for a purely automatic identification of regression effects;\n\n\n\n\nThe Anomaly detection tab.\n\n\n\nModelling – enables time series modelling using the TRAMO and RegARIMA models;\n\n\n\n\nThe Modelling tab.\n\n\n\nSeasonal adjustment – intended for the seasonal adjustment of a time series with the TRAMO-SEATS and X-13ARIMA-SEATS methods.\n\n\n\n\nThe Seasonal adjustment tab.\n\n\n\n\nTools menu\n\n\n\nThe Tools menu\n\n\nThe following functionalities are available from the Tools menu:\n\nContainer – includes several tools for displaying data in a time domain;\nSpectral analysis – contains tools for the analysis of a time series in a frequency domain;\nAggregation – enables the user to investigate a graph of the sum of multiple time series;\nDifferencing – allows for the inspection of the first regular differences of the time series;\nSpreadsheet profiler – offers an Excel-type view of the XLS file imported to JDemetra+.\nPlugins – allows for the installation and activation of plugins, which extend JDemetra+ functionalities.\nOptions – presents the default interface settings and allows for their modification.\n\n\nContainer\nContainer includes basic tools to display the data. The following items are available: Chart, Grid, Growth Chart and List.\n\n\n\nThe Container menu\n\n\ndetailed in data visualization part (link to set up)\n\n\nSpectral analysis\nThe Spectral analysis section provides three spectral graphs that allows an in-depth analysis of a time series in the frequency domain. These graphs are the Auto-regressive Spectrum, the Periodogram and the Tukey Spectrum. For more information the user may study a basic desription of spectral analysis and a detailed presentation of the abovementioned tools.\n\n\n\nTools for spectral analysis\n\n\n\n\nAggregation\nAggregation calculates the sum of the selected series and provides basic information about the selected time series, including the start and end date, the number of observations and a sketch of the data graph.\nlink to data visu chap\n\n\nDifferencing\nThe Differencing window displays the first regular differences for the selected time series together with the corresponding periodogram and the PACF function.\nlink to data visu chap\n\n\nSpreadsheet profiler\nThe Spreadsheet profiler offers an Excel-type view of the XLS file imported to JDemetra+. To use this functionality drag the file name from the Providers window and drop it to the empty Spreadsheet profiler window.\n\n\n\nThe Spreadsheet Profiler window\n\n\n\n\nPlugins\nInstallation an functionalities of plugins are described in the related chapter\n\n\nOptions\nThe Options window includes five main panels: Demetra, General, Keymap, Appearance and Miscellaneous. They are visible in the very top of the Options window.\n\n\n\nThe main sections of the Options window\n\n\nBy default, the Demetra tab is shown. It is divided into seven panels: Behaviour, Demetra UI, Statistics, Data transfer, Demetra Paths, ProcDocumentItems, and Interchange.\nBehaviour defines the default reaction of JDemetra+ to some of the actions performed by the user.\n\nProviders – an option to show only the data providers that are currently available.\nPersistence – an option to restore the data sources after re-starting the application so that there is no need to fetch them again (Persist opened DataSources) and an option to restore all the content of the chart and grid tools (Persist tools content).\nThreading – defines how resources are allocated to the computation (Batch Pool Size controls the number of cores used in parallel computation and Batch Priority defines the priority of computation over other processes). Changing these values might improve computation speed but also reduce user interface responsiveness.\nTime Series – determines the default behaviour of the program when the user double clicks on the data. It may be useful to plot the data, visualise it on a grid, or to perform any pre-specified action, e.g. execute a seasonal adjustment procedure.\n\n\n\n\nThe content of the Behavior tab\n\n\nThe Demetra UI tab enables the setting of:\n\nA default colour scheme for the graphs (Color scheme).\nThe data format (uses MS Excel conventions). For example, ###,###.#### implies the numbers in the tables and the y-axis of the graphs will be rounded up to four decimals after the decimal point (Data format).\nThe default number of last years of the time series displayed in charts representing growth rates (Growth rates).\nThe control of the view of the window for adding pre-specified outliers. (Pre-specified Outliers).\nThe visibility of the icons in the context menus (Context Menus).\n\n\n\n\nThe content of the Demetra UI tab\n\n\nThe Statistics tab includes options to control:\n\nThe number of years used for spectral analysis and for model stability (Default Number of Last Years);\nThe default pre-defined specification for seasonal adjustment (Seasonal Adjustment);\nThe type of the analysis of revision history (Revision History):\n\nFreeParameters – the RegARIMA model parameters and regression coefficients of the RegARIMA model will be re-estimated each time the end point of the data is changed. This argument is ignored if no RegARIMA model is fit to the series.\nComplete – the whole RegARIMA model together with regressors will be re-identified and re-estimated each time the end point of the data is changed. This argument is ignored if no RegARIMA model is fitted to the series.\nNone – the ARIMA parameters and regression coefficients of the RegARIMA model will be fixed throughout the analysis at the values estimated from the entire series (or model span).\n\nThe settings for the quality measures and tests used in a diagnostic procedure:\n\nDefault components – a list of series and diagnostics that are displayed in the SAProcessing \\(\\) Output window. The list of default items can be modified with the respective Select button (see figure below)\nDiagnostics – a list of diagnostics tests, where the user can modify the default settings (see figure “The panel for modification of the settings for the tests in the Basic checks section” below).\n\n\n\n\n\nThe Default components section on the Statistics tab\n\n\nAn explanation of the list of the series and diagnostics components that are displayed in the Default components section can be found here.\nTo modify the settings for a particular measure, double click on a selected row (select the test’s name from the list and click on the working tools button), introduce changes in the pop-up window and click the OK button.\nTo reset the default settings for a given test, select this test from the list and click on the backspace button situated below the working tools button. The description of the parameters for each quality measure and test used in a diagnostic procedure can be found in the output from modelling and the output from seasonal adjustement nodes.\n\n\n\nThe panel for modification of the settings for the tests in the Basic checks section\n\n\nThe users can customize the diagnostics and they can specify the default settings for different outputs. Their preferences are saved between different sessions of JDemetra+. This new feature is accessible in the Statistics tab of the Options panel.\n\n\n\nThe settings of the output files\n\n\nThe Data Transfer tab contains multiple options that define the behaviour of the drag and drop and copy-paste actions. To change the default settings, double click on the selected item. Once the modifications are introduced, confirm them with the OK button.\n\n\n\nThe content of the Data Transfer tab\n\n\nDemetra Paths allows the user to specify the relative location of the folders where the data can be found. In this way, the application can access data from different computers. Otherwise, the user would need to have access to the exact path where the data is located. To add a location, select the data provider, click the “+” button and specify the location.\n\n\n\nThe content of the Demetra Paths tab\n\n\nProcDocumentItems includes a list of all reports available for processed documents like seasonal adjustment. The Interchange tab lists the protocols that can be used to export/import information like calendars, specifications, etc. For the time being, the user cannot customize the way the standard exchanges are done. However, such features could be implemented in plug-ins.\nThe next section, General, allows for the customisation of the proxy settings. A proxy is an intermediate server that allows an application to access the Internet. It is typically used inside a corporate network where Internet access is restricted. In JDemetra+, the proxy is used to get time series from remote servers like .Stat.\n\n\n\nThe General tab\n\n\nKeymap provides a list of default key shortcuts to access some of the functionalities and it allows the user to edit them and to define additional shortcuts.\n\n\n\nThe Keymap tab\n\n\nThe Appearance and Miscellaneous tabs are tabs automatically provided by the Netbeans platform. They are not used by JDemetra+.\n\n\n\nView\nThe View menu contains functionalities that enable the user to modify how JDemetra+ is viewed. It offers the following items:\n\nSplit – the function is not operational in the current version of the software.\nToolbars – displays selected toolbars under the main menu. The File toolbar contains the Save all icon. The Performance toolbar includes two icons: one to show the performance of the application, the other to stop the application profiling and taking a snapshot. The Other toolbar determines the default behaviour of the program when the user double clicks on the data. It may be useful to plot the data, visualise it on a grid, or to perform any pre-specified action, e.g. execute a seasonal adjustment procedure.\nShow Only Editor – displays only the Results panel and hides other windows (e.g. Workspace and Providers).\nFull Screen – displays the current JDemetra+ view in full screen.\n\n\n\n\nThe View menu\n\n\n\n\nWindow menu\nThe Window menu offers several functions that facilitate the analysis of data and enables the user to adjust the interface view to the user’s needs.\n\n\n\nThe Window menu\n\n\n\nPreview Time Series – opens a window that plots any of the series the user selects from Providers.\nDebug – opens a Preview Time Series window that enables a fast display of the graphs for time series from a large dataset. To display the graph click on the series in the Providers window.\nProviders – opens (if closed) and activates the Providers window.\nVariables – opens (if closed) and activates the Variable window.\nWorkspace – opens (if closed) and activates the Workspace window.\nOutput – a generic window to display outputs in the form of text; useful with certain plug-ins (e.g. tutorial descriptive statistics).\nEditor – activates the editor panel (and update the main menu consequently).\nConfigure Window – enables the user to change the way that the window is displayed (maximise, float, float group, minimise, minimise group). This option is active when some window is displayed in the JD+ interface.\nProperties – opens the Properties window and displays the properties of the marked item (e.g. time series, data source).\nReset Windows – restores the default JDemetra+ view.\nClose Window – closes all windows that are open.\nClose All Documents – closes all documents that are open.\nClose Other Documents – closes all documents that are open except for the one that is active (which is the last activated one).\nDocument Groups – enables the user to create and manage the document groups.\nDocuments – lists all documents that are active.\n\n\n\nHelp menu\n\n\nAll TS&view\n\n\nSearch option"
  },
  {
    "objectID": "T-r-packages.html#overview",
    "href": "T-r-packages.html#overview",
    "title": "Using JDemetra+ in R",
    "section": "Overview",
    "text": "Overview\nCore JDemetra Java algorithms can be accessed via several tools:\n\nGraphical User Interface GUI\n…enhanced with additional plug-ins\nR packages\n\nThis chapter provides an overview of the packages linked to JDemetra core routines version 2.x and 3.x (under construction). More details on specific functions are available in the relevant chapters in the Algorithms part of this documentation. Help pages relative to each package, and also vignettes provide a detailed description for each available functions: purpose, arguments, output and examples.\nUseful resources are also available in this GitHub repository.\n\nPackages based on JDemetra+ version 2 algorithms\nPackages corresponding to version 2.x core routines:\n\nRJDemetra on CRAN or https://github.com/jdemetra/rjdemetra\nrjdworkspace on https://github.com/InseeFrLab/rjdworkspace\nJDCruncheR on https://github.com/InseeFr/JDCruncheR\nggdemetra on https://github.com/AQLT/ggdemetra\nrjdqa on https://github.com/AQLT/rjdqa\n\n\n\nPackages based on JDemetra+ version 3 algorithms\nPackages corresponding to version 3.x core routines:\n\nrjd3toolkit at https://github.com/rjdemetra/rjd3toolkit\nrjd3x13 on https://github.com/rjdemetra/rjd3x13\nrjd3tramoseats at https://github.com/rjdemetra/rjd3tramoseats\nrjdemetra3 at https://github.com/rjdemetra/rjdemetra3\nrjd3highfreq at https://github.com/rjdemetra/rjd3highfreq\nrjd3x11plus at https://github.com/rjdemetra/rjd3x11plus\nrjd3bench at https://github.com/rjdemetra/rjd3bench\nrjd3revsions at https://github.com/rjdemetra/rjd3revisions\nrjd3sts at https://github.com/rjdemetra/rjd3sts\nrjd3stl at https://github.com/rjdemetra/rjd3stl\nrjd3filters at https://github.com/rjdemetra/rjd3filters\nggdemetra3 on https://github.com/AQLT/ggdemetra3"
  },
  {
    "objectID": "T-r-packages.html#algorithms-available-in-r",
    "href": "T-r-packages.html#algorithms-available-in-r",
    "title": "Using JDemetra+ in R",
    "section": "Algorithms available in R",
    "text": "Algorithms available in R\n\nSeasonal adjustment\n\nUsing JDemetra+ version 2.x\n\n\n\n\n\n\n\n\nAlgorithm\nPackage\nComments\n\n\n\n\nX13-Arima\nRJDemetra\nReg-Arima and X-11 decomposition available independently\n\n\nTramo-Seats\nRJDemetra\nTramo available independently\n\n\n\n\n\nUsing JDemetra+ version 3.x\n\n\n\n\n\n\n\n\nAlgorithm\nPackage\nComments\n\n\n\n\nX13-Arima\nrjd3x13\nReg-Arima and X-11 decomposition available independently\n\n\nExtended X-11\nrjd3x11plus\nFor high-frequency (infra-monthly) data\n\n\nTramo-Seats\nrjd3tramoseats\nTramo available independently\n\n\nExtended Tramo\nrjd3highfreq\nFor high-frequency data\n\n\nExtended Seats\nrjd3highfreq\nFor high-frequency data\n\n\nSTL\nrjd3stl\nIncluding high-frequency data\n\n\nBasic Structural Models\nrjd3sts\nState space framework\n\n\n\nVersion 3.x includes [Revision Policies([T-rev-policies-production.qmd) in X-13 and Tramo-Seats.\nMore details on functions parameters and retrieving output in the chapter dedicated to Seasonal Adjustment\n\n\n\nFiltering and Trend estimation\n\n\n\n\n\n\n\n\nAlgorithm\nPackage\nComments\n\n\n\n\nMoving average functions\nrjd3filters\n\n\n\nLocal Polynomial Trend Estimation\nrjd3filters, rjd3x1plus\n\n\n\n\n\n\nBenchmarking and Temporal disaggregation\n\n\n\nAlgorithm\nPackage\nComment\n\n\n\n\nDenton\nrjd3bench\n\n\n\nCholette\nrjd3bench\n\n\n\nCubic splines\nrjd3bench\n\n\n\nTemporal Disaggregation\nrjd3bench"
  },
  {
    "objectID": "T-r-packages.html#utility-functions-available-in-r",
    "href": "T-r-packages.html#utility-functions-available-in-r",
    "title": "Using JDemetra+ in R",
    "section": "Utility functions available in R",
    "text": "Utility functions available in R\nThe packages listed below contain utility functions useful when running a production process with massive datasets.\n\nRunning the cruncher and generating a quality report\nJDemetra+ cruncher is an executable module designed for mass production of seasonally adjusted series .\n\n\n\nPackage\nJD+ version\nComments\n\n\n\n\nrjwsacruncher\n2.x\nestimation update and output\n\n\nJDCruncheR\n2.x\nall the above + Quality Report\n\n\n\n\n\nWrangling JD+ workspaces\nA workspace is a specific JDemetra+ data format (xml files) allowing to use the graphical user interface (GUI) and the cruncher.\n\n\n\nPackage\nJD+ version\nComments\n\n\n\n\nrjdworkspace\n2.x\nupdate meta data, merge workspaces\n\n\nrjdemetra3\n3.x\nidem but under construction\n\n\n\n\n\nGenerating enhanced output in SA estimation\nThis additional packages produce enhanced plots and diagnostic outputs.\n\n\n\nPackage\nJD+ version\nComments\n\n\n\n\nrjdmarkdown\n2.x\nenhanced print of diagnostics\n\n\nggdemetra\n3.x\nplots based on ggplot\n\n\nggdemetra3\n3.x\nplots based on ggplot\n\n\nrjdqa\n2.x\nvisual dashboard on one series"
  },
  {
    "objectID": "T-r-packages.html#general-structure",
    "href": "T-r-packages.html#general-structure",
    "title": "Using JDemetra+ in R",
    "section": "General structure",
    "text": "General structure\nThe R object resulting from an estimation is a list of lists containing raw data, parameters, output series and diagnostics.\n\nOutput structure for RJDemetra package\nOrganised by domain:\n\n\n\nV2 SA structure\n\n\nTo retrieve any element just navigate this list of lists.\n\n\nOutput structure for rjd3x13 package\nResults and specification are separated first and then organised by domain.\n\nsa_x13_v3 &lt;- RJDemetra::x13(y_raw, spec = \"RSA5\")\nsa_x13_v3$result\nsa_x13_v3$estimation_spec\nsa_x13_v3$result_spec\nsa_x13_v3$user_defined\n\nTo retrieve any element just navigate this list of lists."
  },
  {
    "objectID": "T-r-packages.html#installation-procedure",
    "href": "T-r-packages.html#installation-procedure",
    "title": "Using JDemetra+ in R",
    "section": "Installation procedure",
    "text": "Installation procedure\n\nversion 2\n\ninstall.packages(\"RJDemetra\")\nremotes::install_github(\"InseeFrLab/rjdworkspace\")\nremotes::install_github(\"InseeFr/JDCruncheR\")\n\n\n\nversion 3\n\n#install.packages(\"remotes\")\n#install.packages(\"devtools\")\nremotes::install_github(\"rjdemetra/rjd3toolkit\")\nremotes::install_github(\"rjdemetra/rjd3x13\")\nremotes::install_github(\"rjdemetra/rjd3tramoseats\")\nremotes::install_github(\"rjdemetra/rjdemetra3\")\nremotes::install_github(\"rjdemetra/rjd3filters\")\nremotes::install_github(\"rjdemetra/rjd3sts\")\nremotes::install_github(\"rjdemetra/rjd3highfreq\")\nremotes::install_github(\"rjdemetra/rjd3x11plus\")\nremotes::install_github(\"rjdemetra/rjd3stl\")\nremotes::install_github(\"rjdemetra/rjd3bench\")\nremotes::install_github(\"rjdemetra/rjd3revisions\")\nremotes::install_github(\"AQLT/ggdemetra3\")"
  },
  {
    "objectID": "T-r-packages.html#rjd3-suite-of-packages-overview",
    "href": "T-r-packages.html#rjd3-suite-of-packages-overview",
    "title": "Using JDemetra+ in R",
    "section": "rjd3 suite of packages: overview",
    "text": "rjd3 suite of packages: overview\nThe sections below provide an overview of each package based on version 3.x of JDemetra+. For detailed description refer to the package’s own R documentation pages and vignettes.\n\nrjd3toolkit\nContains utility functions used in other rjd3 packages and has to be systematically installed before using any other rjd3 package. From a user point of view, it allows to:\n\ncustomized the pre-adjustment specification in X13-Arima and Tramo-Seats\ngenerate user-defined regressors for calendar correction\ngenerate auxiliary variables (outliers, ramps..)\nrun arima model estimations\nperform tests\naccess general functions such as autocorrelations, distributions…\n\nMore details for each part can be found in `rjd3toolkit``R help pages and related vignettes.\n\n\nrjd3x13\nrjd3x13 gives access to X13-Arima seasonal adjustment algorithm.\n\nSpecification: created with spec_x11_default(), spec_x13_default(), spec_regarima_default() and customized with rjd3toolkit functions + set_x11()\nApply model with x11(), x13(), fast.x13(), regarima(), fast.regarima()\nRefresh policies: regarima.refresh() and x13.refresh()\n\n\n\nrjd3tramoseats\nrjd3tramoseats gives access to TRAMO-SEATS seasonal adjustment algorithm.\n\nSpecification: created with spec_tramoseats_default(), spec_tramo_default() and customized with rjd3toolkit functions + set_seats()\nApply model with tramoseats(), fast.tramoseats(), tramo(), fast.tramo()\nRefresh policies: tramo.refresh() and tramoseats.refresh()\n\n\n\nrjd3highfreq\nSeasonal adjustment of high frequency (infra-monthly) data:\n\nfractional airline based reg-Arima pre-adjustment\nfractional and multi airline decomposition\n\n\n\nrjd3x11plus\n\nExtension of X-11 decomposition with non integer periodicity\n\n\n\nrjd3sts\nGives access to structural time series and state space models, has to be installed to use rjd3highfreq. Handles high-frequency data.\nSeveral examples available here https://github.com/rjdemetra/test_rjd3sts\n\n\nrjd3stl\nrjd3stl contains usual STL functions but is also tailored to handle high-frequency data.\n\n\nggdemetra3\nggdemetra3 uses ggplot2 to add seasonal adjustment statistics to your plot (Like ggdemetra but compatible with version 3.x.). Also compatible with high-frequency methods:\n\nlibrary(\"ggdemetra3\")\n\nspec &lt;- spec_x13_default(\"rsa3\") |&gt; set_tradingdays(option = \"WorkingDays\")\np_ipi_fr &lt;- ggplot(data = ipi_c_eu_df, mapping = aes(x = date, y = FR)) +\n    geom_line() +\n    labs(title = \"SA - IPI-FR\",\n         x = NULL, y = NULL)\np_sa &lt;- p_ipi_fr +\n    geom_sa(component = \"y_f(12)\", linetype = 2,\n            spec = spec) + \n    geom_sa(component = \"sa\", color = \"red\") +\n    geom_sa(component = \"sa_f\", color = \"red\", linetype = 2)\np_sa\np_sa + \n    geom_outlier(geom = \"label_repel\",\n                 coefficients = TRUE,\n                 ylim = c(NA, 65), force = 10,\n                 arrow = arrow(length = unit(0.03, \"npc\"),\n                               type = \"closed\", ends = \"last\"),\n                 digits = 2)\n\n\n\nrjd3filters\nThe rjd3filters package allows to:\n\neasily create/combine/apply moving averages moving_average() (much more general than stats::filter()) and study their properties: plot coefficients (plot_coef()), gain (plot_gain()), phase-shift (plot_phase()) and different statics (diagnostic_matrix())\ntrend-cycle extraction with different methods to treat endpoints:\nlp_filter() local polynomial filters of Proietti and Luati (2008) (including Musgrave): Henderson, Uniform, biweight, Trapezoidal, Triweight, Tricube, “Gaussian”, Triangular, Parabolic (= Epanechnikov)\n\nrkhs_filter() Reproducing Kernel Hilbert Space (RKHS) of Dagum and Bianconcini (2008) with same kernels\n\nfst_filter() FST approach of Grun-Rehomme, Guggemos, and Ladiray (2018)\n\ndfa_filter() derivation of AST approach of Wildi and McElroy (2019)\nchange the filter used in X-11 for TC extraction\n\n\nCreate moving averages\n\nlibrary(\"rjd3filters\")\n\nm1 &lt;- moving_average(rep(1, 3), lags = 1); m1 # Forward MA\nm2 &lt;- moving_average(rep(1, 3), lags = -1); m2 # centred MA\n\nm1 + m2\nm1 - m2\nm1 * m2\n\nCan be used to create all the MA of X-11:\n\ne1 &lt;- moving_average(rep(1, 12), lags = -6)\ne1 &lt;- e1 / sum(e1)\ne2 &lt;- moving_average(rep(1 / 12, 12), lags = -5)\n\n# used to have the 1rst estimate of the trend\ntc_1 &lt;- M2X12 &lt;- (e1 + e2) / 2\ncoef(M2X12) |&gt; round(3)\nsi_1 &lt;- 1 - tc_1\nM3 &lt;- moving_average(rep(1 / 3, 3), lags = -1)\nM3X3 &lt;- M3 * M3\n\n# M3X3 moving average applied to each month\ncoef(M3X3) |&gt; round(3)\nM3X3_seasonal &lt;- to_seasonal(M3X3, 12)\ncoef(M3X3_seasonal) |&gt; round(3)\ns_1 &lt;- M3X3_seasonal * si_1\ns_1_norm &lt;- (1 - M2X12) * s_1\nsa_1 &lt;- 1 - s_1_norm\nhenderson_mm = moving_average(lp_filter(horizon = 6)$filters.coef[, \"q=6\"],\n                              lags = -6)\ntc_2 &lt;- henderson_mm * sa_1\nsi_2 &lt;- 1 - tc_2\nM5 &lt;- moving_average(rep(1 / 5, 5), lags = -2)\nM5X5_seasonal &lt;- to_seasonal(M5 * M5, 12)\ns_2 &lt;- M5X5_seasonal * si_2\ns_2_norm &lt;- (1 - M2X12) * s_2\nsa_2 &lt;- 1 - s_2_norm\ntc_f &lt;- henderson_mm * sa_2\n\n\npar(mai = c(0.3, 0.3, 0.2, 0))\nlayout(matrix(c(1, 1, 2, 3), 2, 2, byrow = TRUE))\n\nplot_coef(tc_f)\nplot_coef(sa_2, col = \"orange\", add = TRUE)\nlegend(\"topleft\", \n       legend = c(\"Final TC filter\", \"Final SA filter\"),\n       col = c(\"black\", \"orange\"), lty = 1)\n\nplot_gain(tc_f)\nplot_gain(sa_2, col = \"orange\", add = TRUE)\n\nplot_phase(tc_f)\nplot_phase(sa_2, col = \"orange\", add = TRUE)\n\n\n\nApply a moving average\n\ny &lt;- retailsa$AllOtherGenMerchandiseStores\ntrend &lt;- y * tc_1\nsa &lt;- y * sa_1\nplot(window(ts.union(y, trend, sa), start = 2000),\n     plot.type = \"single\",\n     col = c(\"black\", \"orange\", \"lightblue\"))\n\n\n\n\nrjd3bench\nTailored for Benchmarking and temporal disaggregation\nSeveral examples here\n\n\nrjd3revisions\nRevsion analysis. (See vignette in package)\n\n\nrjdemetra 3\nThis package allows to wrangle JDemetra+ workspaces in R with functions:\n\nload_workspace\nsave_workspace\n\n…\nUnder construction, it Will contain all the functionalities of rjdworkspace (upgraded from version 2).\nMore information here"
  },
  {
    "objectID": "T-Production-tools-cruncher-QR.html#overview",
    "href": "T-Production-tools-cruncher-QR.html#overview",
    "title": "Production, Cruncher and quality report",
    "section": "Overview",
    "text": "Overview\nIn this chapter you will find how to\n\nautomate the Seasonal adjustment estimation process\nupdate a workspace when new data is available\nexport output (series, diagnostics, parameters)\ngenerate a quality report usable for selective editing (manual fine tuning)"
  },
  {
    "objectID": "T-Production-tools-cruncher-QR.html#automate-estimation-with-the-cruncher",
    "href": "T-Production-tools-cruncher-QR.html#automate-estimation-with-the-cruncher",
    "title": "Production, Cruncher and quality report",
    "section": "Automate estimation with the cruncher",
    "text": "Automate estimation with the cruncher\nThe cruncher is an additional “executable” module. It can be launched via R or SAS for example.\nObjectives of the cruncher:\n\nupdate a JDemetra+ workspace (with a given revision policy)\nexport the results (series and diagnostics),\n\nwithout having to open the graphical interface and operate manually. Suitable for a production process.\n\nInstallation procedure\n\nDownload the cruncher\n\nAvailable here https://github.com/jdemetra/jwsacruncher/releases\nClick on the zip code line of the latest release\n\nUnzip locally (or on server)\n\n\n\nHelp pages\nDocumentation is available here or click on the wiki icon on the Github page https://github.com/jdemetra/jwsacruncher/wiki\n\n\nRunning the cruncher in R\nTwo R packages are currently available\n\nrjwsacruncher on CRAN: workspace update and output production\nCruncher (https://github.com/InseeFr/JDCruncheR): same functions as rjwsacruncher but adds a quality report\n\n\nInstallation\n\nrjwsacruncher\n\n\ninstall.packages(rjwsacruncher)\n\n\nJDCruncheR package: download the .zip or .tar.gz file from https://github.com/InseeFr/JDCruncheR/releases.\n\nAdditional packages needed\n\ninstall.packages(c(\"XLConnect\", \"XML\"))\n\n\n\nLoading\n\nlibrary(\"JDCruncheR\")\n\nor\n\nlibrary(\"rjwsacruncher\")\n\n\n\nConnecting the cruncher module\nTo connect the cruncher to the R package, the path to the bin directory containing the cruncher.bat file must be specified. This directory is available once the zip file has been unzipped.\n\noptions(cruncher_bin_directory =\n    \"C:/Software/jwsacruncher-2.2.3/jdemetra-cli-2.2.3/bin\")\n\n\nchecking the current value\n\n\ngetOption(\"cruncher_bin_directory\")\n\n\n\n\nUpdating a workspace\nThe functions described in this section are identical for both packages.\n\nRunning estimations\nThe general context: two use cases\n\nRun first estimation of seasonally adjusted series (from raw series and parameters contained in the workspace)\n\n\ncruncher_and_param(workspace = \"D:/my_folder/my_ws.xml\",\n                   rename_multi_documents = FALSE,\n                   policy = \"complete\" #name of the revision policy\n                   log= my_log_file.txt)\n\n\nApply a revision policy to updated raw series\n\nThe function cruncher_and_param() allows to do that\n\ncruncher_and_param(workspace = \"D:/my_folder/my_ws.xml\",\n                   rename_multi_documents = FALSE,\n                   policy = \"lastoutliers\" #name of the revision policy\n                   log= my_log_file.txt)\n\nTo use the documentation, compute help() or ?function:\n\n?cruncher_and_param\nhelp(cruncher_and_param)\n\nBefore running SA estimations, set the export options.\n\n\n\nConfiguring output options\nAfter updating the workspace with the selected revision policies, the cruncher generates output - series (csv files) - diagnostics and parameters (demetra_m.csv file)\nThese files will be created in the workspace’s repository, sub-repository ’Output”\n\npath=\"My_Workspace/Output/SAProcessing\"\n\n\nSelecting time series to export\n\n# returns names of the currently exported series \ngetOption(\"default_tsmatrix_series\")\n# example of setting this option\noptions(default_tsmatrix_series = c(\"sa\", \"sa_f\"))\n# only seasonally adjsuted series (\"sa\") and its forecasts (\"sa_f\") will be exported\n\n\n\nSelecting diagnostics and parameters to exoprt\n\n# returns names of the currently exported diagnostics and parameters\ngetOption(\"default_matrix_item\")\n# example of setting this option\noptions(default_matrix_item = c(\"likelihood.aic\",\n                                \"likelihood.aicc\",\n                                \"likelihood.bic\",\n                                \"likelihood.bicc\"))"
  },
  {
    "objectID": "T-Production-tools-cruncher-QR.html#quality-report-with-jdcruncher",
    "href": "T-Production-tools-cruncher-QR.html#quality-report-with-jdcruncher",
    "title": "Production, Cruncher and quality report",
    "section": "Quality report with JDCruncheR",
    "text": "Quality report with JDCruncheR\nThe JDCruncheR package also:\n\ncomputes a quality score\ncreates a quality report from the diagnostics produced by JDemetra+\n\n\nMain steps\nThe three main functions of the package are:\n\nextract_QR to extract the quality report from the csv file (demetra_m.csv) that contains all JD+ diagnostics;\ncompute_score to compute a weighted score based on the diagnostics\nexport_xlsx to export the quality report.\n\n\n# choose the demetra_m.csv file generated by the cruncher\nQR &lt;- extract_QR()\nQR\n\n?compute_score # to see how the score is calculated (formula)\nQR &lt;- compute_score(QR,\n                    n_contrib_score = 3)\n\nQR\n\nQR &lt;- sort(QR, decreasing = TRUE, sort_variables = \"score\")\nexport_xlsx(QR,\n            file_name = \"U:/quality_report.xls\")\n\n\n\nPiling up results\nWhen working with several workspaces or Seasonal adjustment processings (SAP) within a given workspace, quality reports can be piled up with the function rbind() or by creating a mQR_matrix object with the function mQR_matrix()\n\nQR1 &lt;- extract_QR()\nQR2 &lt;- extract_QR()\nmQR &lt;- mQR_matrix(QR1, QR2)\nmQR\n# naming each object\nnames(mQR) &lt;- c(\"report_1\", \"report_2\")\n# Equivalent to: \nmQR &lt;- mQR_matrix(report_1 = QR1, report_2 = QR2)\nmQR\n\n# score calculation for all reports\nmQR &lt;- compute_score(mQR,\n                    n_contrib_score = 3)\nexport_xlsx(mQR,\n            export_dir = \"U:/\")\n\n\n\nConditionnal score\nMissing values can be ignored and conditions can be set for indicators:\n\n# oos_mse weight reduced to 1 when the other \n# indicators are \"Bad\" ou \"Severe\"\ncondition1 &lt;- list(indicator = \"oos_mse\",\n                   conditions = c(\"residuals_independency\",\n                                  \"residuals_homoskedasticity\",\n                                  \"residuals_normality\"),\n                   conditions_modalities = c(\"Bad\",\"Severe\"))\nBQ &lt;- compute_score(BQ, n_contrib_score = 5,\n                    conditional_indicator = list(condition1),\n                    na.rm = TRUE)\n\n\n\nCustomize the score computation\nPractical steps if you want to customize the score computation (see package documentation in R)\n\nselect your indicators of interest\nadjust “good”, “bad”…threshold in JD+ GUI if necessary\nby default good=0, uncertain=1, bad or severe=3\nchange this grading system and/or the weights directly in the package functions\nrebuild your package"
  },
  {
    "objectID": "T-Production-tools-cruncher-QR.html#list-of-exportable-series",
    "href": "T-Production-tools-cruncher-QR.html#list-of-exportable-series",
    "title": "Production, Cruncher and quality report",
    "section": "List of exportable series",
    "text": "List of exportable series\nSome available output series will be different when using X13-Arima or Tramo-Seats."
  },
  {
    "objectID": "T-Production-tools-cruncher-QR.html#list-of-exportable-diagnostics-and-parameters",
    "href": "T-Production-tools-cruncher-QR.html#list-of-exportable-diagnostics-and-parameters",
    "title": "Production, Cruncher and quality report",
    "section": "List of exportable diagnostics and parameters",
    "text": "List of exportable diagnostics and parameters\nSome parameters and available diagnostics will be different when using X13-Arima or Tramo-Seats.\n\noptions(default_matrix_item = \n    c(\"period\", \"span.start\", \"span.end\", \"span.n\", \"span.missing\",\n      \"espan.start\", \"espan.end\", \"espan.n\", \"log\", \"adjust\", \"regression.lp\",\n      \"regression.ntd\", \"regression.nmh\", \"regression.td-derived\",\n      \"regression.td-ftest\", \"regression.easter\", \"regression.nout\",\n      \"regression.noutao\", \"regression.noutls\", \"regression.nouttc\",\n      \"regression.noutso\", \"regression.td(*):4\", \"regression.out(*)\",\n      \"regression.user(*)\", \"likelihood.neffectiveobs\", \"likelihood.np\",\n      \"likelihood.logvalue\", \"likelihood.adjustedlogvalue\", \"likelihood.ssqerr\",\n      \"likelihood.aic\", \"likelihood.aicc\", \"likelihood.bic\", \"likelihood.bicc\",\n      \"residuals.ser\", \"residuals.ser-ml\", \"residuals.mean\", \"residuals.skewness:3\",\n      \"residuals.kurtosis:3\", \"residuals.dh\", \"residuals.lb\", \"residuals.lb2:3\",\n      \"residuals.seaslb\", \"residuals.bp\", \"residuals.bp2\", \"residuals.seasbp\",\n      \"residuals.nudruns\", \"residuals.ludruns\", \"residuals.nruns\",\n      \"residuals.lruns\", \"arima\", \"arima.mean\", \"arima.p\", \"arima.d\",\n      \"arima.q\", \"arima.bp\", \"arima.bd\", \"arima.bq\", \"arima.phi(*)\",\n      \"arima.bphi(*)\", \"arima.th(*)\", \"arima.bth(*)\", \"decomposition.seasonality\",\n      \"decomposition.parameters_cutoff\", \"decomposition.model_changed\",\n      \"decomposition.tvar-estimator\", \"decomposition.tvar-estimate\",\n      \"decomposition.tvar-pvalue\", \"decomposition.savar-estimator\",\n      \"decomposition.savar-estimate\", \"decomposition.savar-pvalue\",\n      \"decomposition.svar-estimator\", \"decomposition.svar-estimate\",\n      \"decomposition.svar-pvalue\", \"decomposition.ivar-estimator\",\n      \"decomposition.ivar-estimate\", \"decomposition.ivar-pvalue\", \"decomposition.tscorr-estimator\",\n      \"decomposition.tscorr-estimate\", \"decomposition.tscorr-pvalue\",\n      \"decomposition.ticorr-estimator\", \"decomposition.ticorr-estimate\",\n      \"decomposition.ticorr-pvalue\", \"decomposition.sicorr-estimator\",\n      \"decomposition.sicorr-estimate\", \"decomposition.sicorr-pvalue\",\n      \"decomposition.ar_root(*)\", \"decomposition.ma_root(*)\", \"method\",\n      \"variancedecomposition.cycle\", \"variancedecomposition.seasonality\",\n      \"variancedecomposition.irregular\", \"variancedecomposition.tdh\",\n      \"variancedecomposition.others\", \"variancedecomposition.total\",\n      \"diagnostics.logstat\", \"diagnostics.levelstat\", \"diagnostics.fcast-insample-mean\",\n      \"diagnostics.fcast-outsample-mean\", \"diagnostics.fcast-outsample-variance\",\n      \"diagnostics.seas-lin-f\", \"diagnostics.seas-lin-qs\", \"diagnostics.seas-lin-kw\",\n      \"diagnostics.seas-lin-friedman\", \"diagnostics.seas-lin-periodogram\",\n      \"diagnostics.seas-lin-spectralpeaks\", \"diagnostics.seas-si-combined\",\n      \"diagnostics.seas-si-evolutive\", \"diagnostics.seas-si-stable\",\n      \"diagnostics.seas-res-f\", \"diagnostics.seas-res-qs\", \"diagnostics.seas-res-kw\",\n      \"diagnostics.seas-res-friedman\", \"diagnostics.seas-res-periodogram\",\n      \"diagnostics.seas-res-spectralpeaks\", \"diagnostics.seas-res-combined\",\n      \"diagnostics.seas-res-combined3\", \"diagnostics.seas-res-evolutive\",\n      \"diagnostics.seas-res-stable\", \"diagnostics.seas-i-f\", \"diagnostics.seas-i-qs\",\n      \"diagnostics.seas-i-kw\", \"diagnostics.seas-i-periodogram\", \"diagnostics.seas-i-spectralpeaks\",\n      \"diagnostics.seas-i-combined\", \"diagnostics.seas-i-combined3\",\n      \"diagnostics.seas-i-evolutive\", \"diagnostics.seas-i-stable\",\n      \"diagnostics.seas-sa-f\", \"diagnostics.seas-sa-qs\", \"diagnostics.seas-sa-kw\",\n      \"diagnostics.seas-sa-friedman\", \"diagnostics.seas-sa-periodogram\",\n      \"diagnostics.seas-sa-spectralpeaks\", \"diagnostics.seas-sa-combined\",\n      \"diagnostics.seas-sa-combined3\", \"diagnostics.seas-sa-evolutive\",\n      \"diagnostics.seas-sa-stable\", \"diagnostics.seas-sa-ac1\", \"diagnostics.td-sa-all\",\n      \"diagnostics.td-sa-last\", \"diagnostics.td-i-all\", \"diagnostics.td-i-last\",\n      \"diagnostics.td-res-all\", \"diagnostics.td-res-last\", \"diagnostics.ic-ratio-henderson\",\n      \"diagnostics.ic-ratio\", \"diagnostics.msr-global\", \"diagnostics.msr(*)\",\n      \"decomposition.trendfilter\", \"decomposition.seasfilter\", \"m-statistics.m1\",\n      \"m-statistics.m2\", \"m-statistics.m3\", \"m-statistics.m4\", \"m-statistics.m5\",\n      \"m-statistics.m6\", \"m-statistics.m7\", \"m-statistics.m8\", \"m-statistics.m9\",\n      \"m-statistics.m10\", \"m-statistics.m11\", \"m-statistics.q\", \"m-statistics.q-m2\",\n      \"diagnostics.basic checks.definition:2\", \"diagnostics.basic checks.annual totals:2\",\n      \"diagnostics.visual spectral analysis.spectral seas peaks\", \"diagnostics.visual spectral analysis.spectral td peaks\",\n      \"diagnostics.regarima residuals.normality:2\", \"diagnostics.regarima residuals.independence:2\",\n      \"diagnostics.regarima residuals.spectral td peaks:2\", \"diagnostics.regarima residuals.spectral seas peaks:2\",\n      \"diagnostics.outliers.number of outliers:2\", \"diagnostics.out-of-sample.mean:2\",\n      \"diagnostics.out-of-sample.mse:2\", \"diagnostics.m-statistics.q:2\",\n      \"diagnostics.m-statistics.q-m2:2\", \"diagnostics.seats.seas variance:2\",\n      \"diagnostics.seats.irregular variance:2\", \"diagnostics.seats.seas/irr cross-correlation:2\",\n      \"diagnostics.residual seasonality tests.qs test on sa:2\", \"diagnostics.residual seasonality tests.qs test on i:2\",\n      \"diagnostics.residual seasonality tests.f-test on sa (seasonal dummies):2\",\n      \"diagnostics.residual seasonality tests.f-test on i (seasonal dummies):2\",\n      \"diagnostics.combined seasonality test.combined seasonality test on sa:2\",\n      \"diagnostics.combined seasonality test.combined seasonality test on sa (last 3 years):2\",\n      \"diagnostics.combined seasonality test.combined seasonality test on irregular:2\",\n      \"diagnostics.residual trading days tests.f-test on sa (td):2\",\n      \"diagnostics.residual trading days tests.f-test on i (td):2\",\n      \"diagnostics.quality\"\n    ))"
  },
  {
    "objectID": "T-rev-policies-production.html#chapters-overview",
    "href": "T-rev-policies-production.html#chapters-overview",
    "title": "Production and revision policies",
    "section": "Chapter’s overview",
    "text": "Chapter’s overview\nIn this chapter you will find out:\n\nhow to update seasonally adjusted series when new data is available\nwhat is a revision policy in a seasonal adjustment context\nthe description of all the revision policies available in JDemetra+\nhow to implement a revision policy using the Graphical User Interface, R or the Cruncher."
  },
  {
    "objectID": "T-rev-policies-production.html#revision-policies",
    "href": "T-rev-policies-production.html#revision-policies",
    "title": "Production and revision policies",
    "section": "Revision Policies",
    "text": "Revision Policies\n\nDefinition and context\nWhen raw data has been modified (extended and/or revised), the previous seasonal adjustment estimation needs updating. It can be redone from scratch (complete re-estimation) or update keeping fixed a predefined set of parameters already estimated. Eurostat’s Guidelines on seasonal adjustment (2015) recommend not to perform a complete re-estimation of the parameters on an infra-annual basis. The set of constraints on the parameters is called “revision policy” or “refresh policy”.\n\n\nOverview\nIn X13-Arima and Tramo-Seats revision policies are ways to impose constraints on the pre-adjustment phase, while the decomposition phase (X-11 or Seats) will be entirely re-run on new data. The changes induced by X-11 re-estimation stem only from a revised linerarized series, while in Seats they are also induced by the arima model possible coefficient and/ or order changes.\nThe table below lists the available policies as well as their name for implementation with the graphical user interface (GUI), the cruncher or rjd3x13 ans rjd3tramoseats packages."
  },
  {
    "objectID": "T-rev-policies-production.html#implementation-in-gui",
    "href": "T-rev-policies-production.html#implementation-in-gui",
    "title": "Production and revision policies",
    "section": "Implementation in GUI",
    "text": "Implementation in GUI\nTo refresh results from previous estimation open your workspace, then SAprocessing click on a series to highlight it (or select several series), then right-click and choose Refresh, the following panel is displayed.\n\n\nDisplay in results panel\nSections below detail, though an example, the changes in results display brought about by the use of a given revision policy.\n\nConcurrent\nConcurrent adjustment means that the model, filters, outliers, regression parameters and transformation type are all re-identified and the respective parameters and factors re-estimated every time new observations are available. This option in JDemetra+ means that a completely new model is identified, and the previous results are not taken into account, excepted for the user-defined parameters.\nThe picture below presents the initial model (on the left) and the results of the refreshment procedure with the Concurrent adjustment option (on the right). The transformation type has changed from none to log. The ARIMA model has been re-identified (it has changed from (0,1,1)(1,1,0) to (1,1,0)(0,1,1)). In contrast to the initial model, in the updated model trading day effects and a leap year effect are no longer included. Also the automatically identified outliers are not the same in both models.\n\n\n\nPartial concurrent adjustment → Fixed model\nThe Partial concurrent adjustment → Fixed model strategy means that the ARIMA model, outliers and other regression parameters are not re-identified and the values of the parameters are fixed. In particular, no new outliers or calendar variables are added to the model as well as no changes neither in the calendar variables nor in the outliers’ types are allowed. The transformation type remains unchanged.\nThe picture below presents the initial model (on the left) and the results of the refreshment procedure with the Partial concurrent adjustment → Fixed model option (on the right). The parameters of the ARIMA part are not estimated and their values are the same as before. The trading days and outliers are fixed too and no new regression effects are identified.\n\n\n\nPartial concurrent adjustment → Estimate regression coefficients\nThe Partial current adjustment → Estimate regression coefficients option means that the ARIMA model, outliers and other regression parameters are not re-identified. The coefficients of the ARIMA model are fixed, other coefficients are re-estimated. In particular, no new outliers or calendar variables are added to the model as well as no changes neither in the calendar variables nor in the outliers’ types are allowed. The transformation type remains unchanged.\nThe picture below presents the initial model (on the left) and the results of the refreshment procedure with the Partial concurrent adjustment → Estimate regression coefficients option (on the right). The number of estimated parameters is 16 in the initial model and 14 in the revised model (the parameters of the ARIMA model are not estimated.\n\nThe Partial concurrent adjustment→ Estimate regression coefficients revision policy results\n\n\nPartial concurrent adjustment → Estimate regression coefficients + Arima parameters\nThe Partial concurrent adjustment → Estimate regression coefficients + Arima parameters strategy means that the ARIMA model, outliers and other regression parameters are not re-identified. All parameters of the Reg-ARIMA model are re-estimated but the explanatory variables remain the same. The transformation type remains unchanged.\nThe picture below presents the initial model (on the left) and the results of the refreshment procedure with the Partial concurrent adjustment → Estimate regression coefficient + Arima parameters option (on the right). The parameters of the ARIMA part have been re-estimated and their values have been updated. Also regression coefficients have been re-estimated and the number of estimated coefficients in the revised model is the same as in the initial model (i.e. 16 estimated coefficients). The structure of the model remains unchanged while all coefficients have been updated.\n\n\n\nPartial concurrent adjustment → Estimate regression coefficients + outliers\nThe Partial concurrent adjustment → Estimate regression coefficients + outliers option means that the ARIMA model and regression parameters, except outliers, are not re-identified. The parameters of these variables, however, are re-estimated. All outliers are re-identified, i.e. the previous outcome of the outlier detection procedure is not taken into account and all outliers are identified and estimated once again. The transformation type remains unchanged.\nThe picture below presents the initial model (on the left) and the results of the refreshment procedure with the Partial concurrent adjustment → Estimate regression coefficients + outliers option (on the right). The parameters of the ARIMA part have been re-estimated and their values have been updated. Also regression coefficients for the calendar variables have been re-estimated. In the revised model there is no Prespecified outliers section. Instead, the outliers were re-identified.\n\n\n\nPartial concurrent adjustment → Estimate regression coefficients + Arima model\nThe Partial concurrent adjustment → Estimate regression coefficients + Arima model option means that the ARIMA model, outliers and regression variables (except the calendar variables) are re-identified. All parameters are re-estimated. The transformation type remains unchanged.\nThe picture below presents the initial model (on the left) and the results of the refreshment procedure with the Partial concurrent adjustment → Estimate regression coefficients + Arima model option (on the right). The ARIMA part has been re-identified (a change from (2,1,0)(0,1,1) to (0,1,1)(1,1,1)). Also the regression coefficients for the calendar variables have been re-estimated. In the revised model there is no Prespecified outliers section. Therefore, the outliers were re-identified.\n\n\n\nPartial concurrent adjustment → Estimate regression coefficients + Last outliers\nThe Partial concurrent adjustment → Estimate regression coefficients + Last outliers strategy means that the ARIMA model, outliers (except for the last year of the sample) and other regression parameters are not re-identified. All parameters of the Reg-ARIMA model are re-estimated. The software tests for outliers in the last year of the data span and will include in the model those which are statistically significant. The transformation type remains unchanged.\nThe picture below presents the initial model (on the left) and the results of the refreshment procedure with the Partial concurrent adjustment → Estimate regression coefficients + Last outliers option (on the right). The parameters of the ARIMA part have been re-estimated and their values have been updated. Also the regression coefficients have been re-estimated. The number of estimated coefficients in the revised model is larger than the initial model because an additional outlier has been identified in the last year of the data span."
  },
  {
    "objectID": "T-rev-policies-production.html#implementation-with-the-cruncher",
    "href": "T-rev-policies-production.html#implementation-with-the-cruncher",
    "title": "Production and revision policies",
    "section": "Implementation with the cruncher",
    "text": "Implementation with the cruncher\nIn a production process, it might be suitable to use the cruncher in order to automatically update workspaces. When using an R package (rjwsacruncher`` orJDCruncher`) to do so, you will just need to specify the policy’s name as shown below. Available policies and names are detailed in the #Overview section.\n\ncruncher_and_param(workspace = \"D:/my_folder/my_ws.xml\",\n                   rename_multi_documents = FALSE,\n                   policy = \"stochastic\" #name of the revision policy\n                   log= my_log_file.txt)"
  },
  {
    "objectID": "T-rev-policies-production.html#implementation-in-r-with-rjd3x13-or-rjd3tramoseats",
    "href": "T-rev-policies-production.html#implementation-in-r-with-rjd3x13-or-rjd3tramoseats",
    "title": "Production and revision policies",
    "section": "Implementation in R with rjd3x13 or rjd3tramoseats",
    "text": "Implementation in R with rjd3x13 or rjd3tramoseats\nWhen performing seasonal adjustment directly in R with rjd3x13 or rjd3tramoseats, you will need to refresh the “result_spec” yielded by the previous estimation with the selected policy. Available policies and names are detailed in the #Overview section. More explanations and code examples are available in the packages’ help pages, corresponding to functions rjd3x13::x13_refresh, rjd3x13::regarima_refresh,rjd3tramoseats::tramoseats_refresh, rjd3tramoseats::tramo_refresh."
  },
  {
    "objectID": "T-plug-ins.html#main-functions",
    "href": "T-plug-ins.html#main-functions",
    "title": "Plug-ins for JDemetra+",
    "section": "Main functions",
    "text": "Main functions\n\nDefault Plugins\n\n\n\n\n\n\n\n\nName\nCategory\nDescription\n\n\n\n\nNbDemetra – Anomaly detection\nSA core algorithms\nIdentification of outliers\n\n\nNbDemetra – Spreadsheet\nIO (Input/output)\nTime series providers for spreadsheet (Excel, OpenOffice)\n\n\nNbDemetra – Common\nIO (Input/output)\nCommon time series providers, like XML and TXT\n\n\nNbDemetra – JDBC\nIO (Input/output)\nTime series provider for the JDBC sources\n\n\nNbDemetra – ODBC\nIO (Input/output)\nTime series provider for the ODBC sources\n\n\nNbDemetra – SDMX\nIO (Input/output)\nTime series provider for SDMX files\n\n\nNbDemetra – Core\nSA core algorithms\nEncapsulation of the core algorithms\n\n\nNbDemetra – UI\nSA core algorithms\nBasic graphical components\n\n\nNbDemetra – Branding\nSA core algorithms\n\n\n\nNbDemetra – SA\nSA core algorithms\nDefault SA framework, including TRAMO-SEATS and X-13ARIMA-SEATS. This implementation can lead to small differences in comparison with the original programs.\n\n\n\nThis list is displayed in the Installed panel. This panel is available from the Plugin functionality and it is activated from the Tools menu (Figure Activation of the Plugin functionality from the Tools menu in Plugins section)."
  },
  {
    "objectID": "T-plug-ins.html#plugins-list",
    "href": "T-plug-ins.html#plugins-list",
    "title": "Plug-ins for JDemetra+",
    "section": "Plugins-list",
    "text": "Plugins-list\n\nBundesbank plug-ins\n\nConCur: The plug-in ConCur supports the controlled current adjustment approach. It supports the storage of the current components and offers graphical tools to compare forecasted and re-estimated figures. Furthermore, a pre-defined summary of the output containing the most important quality measures can be exported to HTML files.\nKIX: The plug-in KIX (German for chain-linked index) has been designed to facilitate the handling of this index type. It offers addition and subtraction of two or more chain-linked time series as well as the computation of contributions of growth.\n\nKIX2.0: KIX 2.0 offers addition and subtraction of two or more chain-linked time series as well as the computation of contributions of growth following the concept of annual overlap. Contributions to growth are calculated with the partial contribution to growth approach.\nKIXE: KIX_E offers addition and subtraction of two or more chain-linked time series as well as the computation of contributions of growth following the concept of one-period overlap. Contributions to growth are calculated with the aid of the Ribe (1999) contribution to growth approach.\nKIX: The program KIX-CC offers for continuously chain-linked indices the aggregation or disaggregation of two or more indices, or the calculation of contributions to growth.\n\nTransReg: The plug-in TransReg allows the user to carry out grouping and centring of user-defined regression variables in JD+.\nXlsx2Ws: The plug-in Xlsx2Ws allows the converting of specific workspace information to a xlsx file and vice versa.\n\n\n\nNational Bank of Belgium plug-ins\n\nAccessThis JDemetra+ extension is a pure java library for reading time series from MS Access databases. It currently supports versions 2000-2016 read/write and 97 read-only.Being a pure Java library, you don’t need MS Access installed in order to read Access files. (edit versions info here)\nSDMX: This plugin provides time series from SDMX to JDemetra+ by querying web services or parsing files.\nSA Advanced: This module provides some experimental seasonal adjustment methods (with RegArima preprocessing), basic structural models, generalized airline models and airline + seasonal noise models (called mixed airline).\n\ngairline: generalized airline model\nmairline: mixed airline model\nmixedfreq: mixed frequencies seasonal adjustment\nsssts: Seasonal specific structural time series\nsts: Structural time series\n\nBenchmarking: This module provides some experimental methods for temporal disaggregation and multi-variate benchmarking:Chow-Lin, Fernandez, Litterman, Cholette, Calendarization.\nNowcasting: Nowcasting is often defined as the prediction of the present, the very near future and the very recent past. The plug-in developed at the National Bank of Belgium helps to operationalize the process of nowcasting. It can be used to specify and estimate dynamic factor models and visualize how the real-time dataflow updates expectations, as for instance in Banbura and Modugno (2010). The software can also be used to perform pseudo out-of-sample forecasting evaluations that consider the calendar of data releases, contributing to the formalization of the nowcasting problem originally proposed by Giannone, et al. (2008) or Evans (2005)."
  },
  {
    "objectID": "T-plug-ins.html#installation-procedure",
    "href": "T-plug-ins.html#installation-procedure",
    "title": "Plug-ins for JDemetra+",
    "section": "Installation procedure",
    "text": "Installation procedure\nInstallation from GUI\nmenu&gt;tools&gt; plug-ins\nThe Plugins window includes five panels: Updates, Available plugins, Downloaded, Installed and Settings, some of them however are not operational in the current version of the software.\n\nThe Updates panel offers the user the option to manually check if some updates of the already installed plugins are available. This functionality, however, is currently not operational for the JDemetra+ plugins.\nThe Available plugins panel allows the downloading of all plugins that are related to JDemetra+. This functionality, however, is currently not operational for the JDemetra+ plugins.\nThe Downloaded panel is designed for the installation of new plugins from a local machine. This process in explained in more detail below.\nThe Settings panel is designated for adding update centres, which are the locations that hold plugins. For each centre the user can specify proxy settings and a time interval to automatically check for any updates. At the moment this functionality is not operational for the JDemetra+ plugins.\n\nInstallation of the new plugins from the local machine can be done from the Plugin functionality activated from the Tools menu.\nInstallation of the new plugins from the local machine can be done from the Plugin functionality activated from the Tools menu.\n\nActivation of the Plugin functionality from the Tools menu\nTo start the process, go to the Downloaded panel and click on the Add Plugins… option. Next the user should select the plugins from the folder in which the plugins have been saved and click the OK button.\n``\n\nThe Downloaded panel – the choice of available plugins\nThe new plugin is now visible in the panel.\n\nA downloaded plugin\nClick on it and choose the Install button.\n\nStarting an installation procedure\nThere is a wizard that allows the user to install the marked plugin(s). In the first step choose Next to continue or Cancel to terminate the process.\n\nInstallation wizard window\nNext, mark the terms of agreements and choose Install.\n\nInitiating installation process\nThen the process is started.\n\nInstallation in progress\nAfter a while JDemetra+ will provide an update in the installation process. Click Finish to close the window.\n\nInstallation completed\nOnce the process is finished, the newly installed plugin is automatically integrated within the software. The picture below compares the view of the Workspace window before (on the left) and after (on the right) the installation of the NbDemetra-ODBC plugin.\n\nThe impact of the plugin on the interface\nThe list of all installed plugins is displayed in the fourth panel. To modify the current settings mark the plugin (by clicking the checkbox in the Select column) and chose an action.\nThe following options are available:\n\nActivate – activates the marked plugin if it is currently inactive. The option is available for inactive plugins (see the picture below);\nDeactivate – deactivates the marked plugin if it is currently active. The option is available for active plugins (see the picture below);\nUninstall – uninstalls the marked plugin.\n\nInactive plugins can be activated or uninstalled.\n\nActive plugins can be deactivated or uninstalled\n\nList of plugins – deactivation\nThere is a wizard that allows the user to activate/deactivate/uninstall the marked plugin(s). The example below illustrates the deactivation process. In the first step the user is expected to confirm or cancel the deactivation.\n\nPlugin’s deactivation process\nIn the second step the user should decide if the software will be restarted immediately after the uninstallation is completed or not.\n\nThe final step of the installation procedure\nIt is possible to delay the restart of the application, although the restart is necessary to complete the process."
  }
]